{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Storage } from 'aws-amplify';\nexport function s3ListUserSneakerPics() {\n  return _regeneratorRuntime.async(function s3ListUserSneakerPics$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          Storage.list('profile-pics/').then(function (result) {\n            return console.log(result);\n          }).catch(function (error) {\n            return console.log('❌ Error Listing Images', error);\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function s3UploadProfilePic(uri, dispatch) {\n  var response, blob;\n  return _regeneratorRuntime.async(function s3UploadProfilePic$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(uri));\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(response.blob());\n\n        case 6:\n          blob = _context2.sent;\n          Storage.put('profile-pics/profile-picture.jpeg', blob, {\n            contentType: 'image/jpeg'\n          }).then(function (response) {\n            return s3GetImageLink(response.key);\n          }).then(function (link) {\n            return updateAuthUserAttributes('picture', link, dispatch);\n          }).catch(function (error) {\n            return console.log('❌ Error Uploading ', error);\n          });\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function s3GetImageLink(key) {\n  var link;\n  return _regeneratorRuntime.async(function s3GetImageLink$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          Storage.configure({\n            level: 'protected'\n          });\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(Storage.get(key));\n\n        case 4:\n          link = _context3.sent;\n          return _context3.abrupt(\"return\", link);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log('❌ Error Getting Image Link', _context3.t0);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/apis/storage.js"],"names":["Storage","s3ListUserSneakerPics","configure","level","list","then","result","console","log","catch","error","s3UploadProfilePic","uri","dispatch","fetch","response","blob","put","contentType","s3GetImageLink","key","link","updateAuthUserAttributes","get"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AAEA,OAAO,SAAeC,qBAAf;AAAA;AAAA;AAAA;AAAA;AACHD,UAAAA,OAAO,CAACE,SAAR,CAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAlB;AACAH,UAAAA,OAAO,CAACI,IAAR,CAAa,eAAb,EACKC,IADL,CACW,UAAAC,MAAM;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAJ;AAAA,WADjB,EAEKG,KAFL,CAEY,UAAAC,KAAK;AAAA,mBAAIH,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCE,KAAtC,CAAJ;AAAA,WAFjB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAeC,kBAAf,CAAmCC,GAAnC,EAAwCC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACHb,UAAAA,OAAO,CAACE,SAAR,CAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAlB;AADG;AAAA,2CAEoBW,KAAK,CAAEF,GAAF,CAFzB;;AAAA;AAEGG,UAAAA,QAFH;AAAA;AAAA,2CAGgBA,QAAQ,CAACC,IAAT,EAHhB;;AAAA;AAGGA,UAAAA,IAHH;AAIHhB,UAAAA,OAAO,CAACiB,GAAR,CAAY,mCAAZ,EAAiDD,IAAjD,EAAuD;AAAEE,YAAAA,WAAW,EAAE;AAAf,WAAvD,EACKb,IADL,CACW,UAAAU,QAAQ;AAAA,mBAAII,cAAc,CAAEJ,QAAQ,CAACK,GAAX,CAAlB;AAAA,WADnB,EAEKf,IAFL,CAEW,UAAAgB,IAAI;AAAA,mBAAIC,wBAAwB,CAAG,SAAH,EAAcD,IAAd,EAAoBR,QAApB,CAA5B;AAAA,WAFf,EAGKJ,KAHL,CAGY,UAAAC,KAAK;AAAA,mBAAIH,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCE,KAAlC,CAAJ;AAAA,WAHjB;;AAJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAeS,cAAf,CAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECpB,UAAAA,OAAO,CAACE,SAAR,CAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAlB;AAFD;AAAA,2CAGoBH,OAAO,CAACuB,GAAR,CAAYH,GAAZ,CAHpB;;AAAA;AAGOC,UAAAA,IAHP;AAAA,4CAIQA,IAJR;;AAAA;AAAA;AAAA;AAOCd,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Storage } from 'aws-amplify'\n\nexport async function s3ListUserSneakerPics() {\n    Storage.configure({ level: 'protected' })\n    Storage.list('profile-pics/')\n        .then( result => console.log(result))\n        .catch( error => console.log('❌ Error Listing Images', error))\n}\n\nexport async function s3UploadProfilePic( uri, dispatch ) {\n    Storage.configure({ level: 'protected' })\n    const response = await fetch( uri )\n    const blob = await response.blob()\n    Storage.put('profile-pics/profile-picture.jpeg', blob, { contentType: 'image/jpeg', })\n        .then( response => s3GetImageLink( response.key ))\n        .then( link => updateAuthUserAttributes ( 'picture', link, dispatch ))\n        .catch( error => console.log('❌ Error Uploading ', error) )  \n}\n\nexport async function s3GetImageLink(key) {\n    try{\n        Storage.configure({ level: 'protected' })\n        const link = await Storage.get(key)\n        return link\n    }\n    catch (err) {\n        console.log('❌ Error Getting Image Link',err)\n    }   \n} \n\n\n// Storage.configure({ level: 'protected' })\n\n// Storage.list('profile-pics/', { level: 'protected' })\n// .then(result => console.log(result))\n// .catch(err => console.log(err))\n\n// const [picture, setPicture] = useState(user.picture)\n\n// const uploadToStorage = async pathToImageFile => {\n//   try {\n//     const response = await fetch(pathToImageFile)\n//     console.log(response)\n//     const blob = await response.blob()\n//     console.log(blob)\n//     Storage.put(`profile-pics/til.jpeg`, blob, {\n//       contentType: 'image/jpeg',\n//     })\n//   } catch (err) {\n//     console.log(err)\n//   }\n// }\n\n// const getfromStorage = async () => {\n//   try {\n//     const response = await Storage.get('profile-pics/til.jpeg')\n//     setPicture(response)\n//     }\n//   catch (err) {\n//     console.error('error accessing the user image',err)\n//   }\n// }\n\n// getfromStorage()\n// console.log(picture)\n\n// const handleAdd = (uri) => {\n// uploadToStorage(uri)\n\n// }\n\n\n// const getfromStorage = async () => {\n//     try {\n//       const response = await Storage.get('profile-pics/profile-picture.jpeg')\n//       .then(updateAuth(response)\n//     }\n//     catch (err) {\n//       console.error('error accessing the user image',err)\n//     }\n//   }\n"]},"metadata":{},"sourceType":"module"}