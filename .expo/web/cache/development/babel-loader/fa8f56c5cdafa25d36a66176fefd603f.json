{"ast":null,"code":"'use strict';\n\nvar _arguments = arguments;\n\nvar _react = require('react');\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _UIManager = require(\"../../apis/UIManager\");\n\nvar _UIManager2 = _interopRequireDefault(_UIManager);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar NativeMethodsMixin = {\n  blur: function blur() {\n    _UIManager2.default.blur(_reactDom2.default.findDOMNode(this));\n  },\n  focus: function focus() {\n    _UIManager2.default.focus(_reactDom2.default.findDOMNode(this));\n  },\n  measure: function measure(callback) {\n    _UIManager2.default.measure(_reactDom2.default.findDOMNode(this), mountSafeCallback(this, callback));\n  },\n  measureInWindow: function measureInWindow(callback) {\n    _UIManager2.default.measureInWindow(_reactDom2.default.findDOMNode(this), mountSafeCallback(this, callback));\n  },\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    _UIManager2.default.measureLayout(_reactDom2.default.findDOMNode(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));\n  },\n  setNativeProps: function setNativeProps(nativeProps) {\n    _UIManager2.default.updateView(_reactDom2.default.findDOMNode(this), nativeProps);\n  }\n};\n\nvar mountSafeCallback = function mountSafeCallback(context, callback) {\n  return function () {\n    if (!callback || context.isMounted && !context.isMounted()) {\n      return;\n    }\n\n    return callback.apply(context, _arguments);\n  };\n};\n\nmodule.exports = NativeMethodsMixin;","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/node_modules/react-native-web/dist/modules/NativeMethodsMixin/index.js"],"names":["_arguments","arguments","_react","require","_reactDom","_reactDom2","_interopRequireDefault","_UIManager","_UIManager2","obj","__esModule","default","NativeMethodsMixin","blur","findDOMNode","focus","measure","callback","mountSafeCallback","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","setNativeProps","nativeProps","updateView","context","isMounted","apply","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,SAAjB;;AAQA,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGC,sBAAsB,CAACF,SAAD,CAAvC;;AAEA,IAAIG,UAAU,GAAGJ,OAAO,wBAAxB;;AAEA,IAAIK,WAAW,GAAGF,sBAAsB,CAACC,UAAD,CAAxC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,IAAIG,kBAAkB,GAAG;AAKvBC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpBL,IAAAA,WAAW,CAACG,OAAZ,CAAoBE,IAApB,CAAyBR,UAAU,CAACM,OAAX,CAAmBG,WAAnB,CAA+B,IAA/B,CAAzB;AACD,GAPsB;AAavBC,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBP,IAAAA,WAAW,CAACG,OAAZ,CAAoBI,KAApB,CAA0BV,UAAU,CAACM,OAAX,CAAmBG,WAAnB,CAA+B,IAA/B,CAA1B;AACD,GAfsB;AAoBvBE,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClCT,IAAAA,WAAW,CAACG,OAAZ,CAAoBK,OAApB,CAA4BX,UAAU,CAACM,OAAX,CAAmBG,WAAnB,CAA+B,IAA/B,CAA5B,EAAkEI,iBAAiB,CAAC,IAAD,EAAOD,QAAP,CAAnF;AACD,GAtBsB;AAuCvBE,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBF,QAAzB,EAAmC;AAClDT,IAAAA,WAAW,CAACG,OAAZ,CAAoBQ,eAApB,CAAoCd,UAAU,CAACM,OAAX,CAAmBG,WAAnB,CAA+B,IAA/B,CAApC,EAA0EI,iBAAiB,CAAC,IAAD,EAAOD,QAAP,CAA3F;AACD,GAzCsB;AA8CvBG,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,oBAAvB,EAA6CC,SAA7C,EAAwDC,MAAxD,EACb;AACAf,IAAAA,WAAW,CAACG,OAAZ,CAAoBS,aAApB,CAAkCf,UAAU,CAACM,OAAX,CAAmBG,WAAnB,CAA+B,IAA/B,CAAlC,EAAwEO,oBAAxE,EAA8FH,iBAAiB,CAAC,IAAD,EAAOK,MAAP,CAA/G,EAA+HL,iBAAiB,CAAC,IAAD,EAAOI,SAAP,CAAhJ;AACD,GAjDsB;AAsDvBE,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,WAAxB,EAAqC;AACnDjB,IAAAA,WAAW,CAACG,OAAZ,CAAoBe,UAApB,CAA+BrB,UAAU,CAACM,OAAX,CAAmBG,WAAnB,CAA+B,IAA/B,CAA/B,EAAqEW,WAArE;AACD;AAxDsB,CAAzB;;AA+DA,IAAIP,iBAAiB,GAAG,SAASA,iBAAT,CAA2BS,OAA3B,EAAoCV,QAApC,EAA8C;AACpE,SAAO,YAAY;AACjB,QAAI,CAACA,QAAD,IAAaU,OAAO,CAACC,SAAR,IAAqB,CAACD,OAAO,CAACC,SAAR,EAAvC,EAA4D;AAC1D;AACD;;AACD,WAAOX,QAAQ,CAACY,KAAT,CAAeF,OAAf,EAAwB3B,UAAxB,CAAP;AACD,GALD;AAMD,CAPD;;AASA8B,MAAM,CAACC,OAAP,GAAiBnB,kBAAjB","sourcesContent":["'use strict';\n\nvar _arguments = arguments; /**\n                             * Copyright (c) 2015-present, Nicolas Gallagher.\n                             * Copyright (c) 2015-present, Facebook, Inc.\n                             * All rights reserved.\n                             *\n                             * \n                             */\n\nvar _react = require('react');\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _UIManager = require('../../apis/UIManager');\n\nvar _UIManager2 = _interopRequireDefault(_UIManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar NativeMethodsMixin = {\n  /**\n   * Removes focus from an input or view. This is the opposite of `focus()`.\n   */\n\n  blur: function blur() {\n    _UIManager2.default.blur(_reactDom2.default.findDOMNode(this));\n  },\n\n  /**\n   * Requests focus for the given input or view.\n   * The exact behavior triggered will depend the type of view.\n   */\n  focus: function focus() {\n    _UIManager2.default.focus(_reactDom2.default.findDOMNode(this));\n  },\n\n  /**\n   * Determines the position and dimensions of the view\n   */\n  measure: function measure(callback) {\n    _UIManager2.default.measure(_reactDom2.default.findDOMNode(this), mountSafeCallback(this, callback));\n  },\n\n  /**\n   * Determines the location of the given view in the window and returns the\n   * values via an async callback. If the React root view is embedded in\n   * another native view, this will give you the absolute coordinates. If\n   * successful, the callback will be called be called with the following\n   * arguments:\n   *\n   *  - x\n   *  - y\n   *  - width\n   *  - height\n   *\n   * Note that these measurements are not available until after the rendering\n   * has been completed in native.\n   */\n  measureInWindow: function measureInWindow(callback) {\n    _UIManager2.default.measureInWindow(_reactDom2.default.findDOMNode(this), mountSafeCallback(this, callback));\n  },\n\n  /**\n   * Measures the view relative to another view (usually an ancestor)\n   */\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail /* currently unused */\n  ) {\n    _UIManager2.default.measureLayout(_reactDom2.default.findDOMNode(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));\n  },\n\n  /**\n   * This function sends props straight to the underlying DOM node.\n   */\n  setNativeProps: function setNativeProps(nativeProps) {\n    _UIManager2.default.updateView(_reactDom2.default.findDOMNode(this), nativeProps);\n  }\n};\n\n/**\n * In the future, we should cleanup callbacks by cancelling them instead of\n * using this.\n */\nvar mountSafeCallback = function mountSafeCallback(context, callback) {\n  return function () {\n    if (!callback || context.isMounted && !context.isMounted()) {\n      return;\n    }\n    return callback.apply(context, _arguments);\n  };\n};\n\nmodule.exports = NativeMethodsMixin;"]},"metadata":{},"sourceType":"script"}