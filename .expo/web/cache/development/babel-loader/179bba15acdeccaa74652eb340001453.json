{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/phil/Workspace/aws-react-native/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Amplify, { Auth } from 'aws-amplify';\nimport { NavigationContainer } from '@react-navigation/native';\nimport awsconfig from \"./src/aws-exports\";\nAmplify.configure(awsconfig);\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nvar composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nvar store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\nimport reducers from \"../../../reducers\";\nimport AuthNavigator from \"./app/componets/navigation/AuthNavigator\";\nimport TabNavigator from \"./app/componets/navigation/TabNavigator\";\nimport Initializing from \"./app/componets/navigation/Initializing\";\n\nfunction App() {\n  var _useState = useState('initializing'),\n      _useState2 = _slicedToArray(_useState, 2),\n      isUserLoggedIn = _useState2[0],\n      setUserLoggedIn = _useState2[1];\n\n  useEffect(function () {\n    checkAuthState();\n  }, []);\n\n  function checkAuthState() {\n    return _regeneratorRuntime.async(function checkAuthState$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 3:\n            console.log('✅ User is signed in');\n            setUserLoggedIn('loggedIn');\n            _context.next = 11;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('❌ User is not signed in');\n            setUserLoggedIn('loggedOut');\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  function updateAuthState(isUserLoggedIn) {\n    setUserLoggedIn(isUserLoggedIn);\n  }\n\n  return React.createElement(NavigationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, isUserLoggedIn === 'initializing' && React.createElement(Initializing, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 45\n    }\n  }), isUserLoggedIn === 'loggedIn' && React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, React.createElement(TabNavigator, {\n    updateAuthState: updateAuthState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  })), isUserLoggedIn === 'loggedOut' && React.createElement(AuthNavigator, {\n    updateAuthState: updateAuthState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/App.js"],"names":["React","useState","useEffect","Amplify","Auth","NavigationContainer","awsconfig","configure","Provider","createStore","applyMiddleware","compose","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","reducers","AuthNavigator","TabNavigator","Initializing","App","isUserLoggedIn","setUserLoggedIn","checkAuthState","currentAuthenticatedUser","console","log","updateAuthState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,IAAkBC,IAAlB,QAA8B,aAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,SAAP;AACAH,OAAO,CAACI,SAAR,CAAkBD,SAAlB;AAEA,SAASE,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CJ,OAAxE;AACA,IAAMK,KAAK,GAAGP,WAAW,CAACQ,QAAD,EAAWJ,gBAAgB,CAACH,eAAe,CAACE,KAAD,CAAhB,CAA3B,CAAzB;AAEA,OAAOK,QAAP;AAIA,OAAOC,aAAP;AACA,OAAOC,YAAP;AACA,OAAOC,YAAP;;AAEA,SAASC,GAAT,GAAe;AAAA,kBAC6BpB,QAAQ,CAAC,cAAD,CADrC;AAAA;AAAA,MACNqB,cADM;AAAA,MACUC,eADV;;AAGbrB,EAAAA,SAAS,CAAC,YAAM;AACdsB,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAAeA,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEUpB,IAAI,CAACqB,wBAAL,EAFV;;AAAA;AAGIC,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAJ,YAAAA,eAAe,CAAC,UAAD,CAAf;AAJJ;AAAA;;AAAA;AAAA;AAAA;AAMIG,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAJ,YAAAA,eAAe,CAAC,WAAD,CAAf;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,WAASK,eAAT,CAAyBN,cAAzB,EAAyC;AACvCC,IAAAA,eAAe,CAACD,cAAD,CAAf;AACD;;AAEH,SACI,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,cAAc,KAAK,cAAnB,IAAqC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxC,EAEKA,cAAc,KAAK,UAAnB,IACC,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEN,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAc,IAAA,eAAe,EAAEY,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHN,EAOKN,cAAc,KAAK,WAAnB,IACC,oBAAC,aAAD;AAAe,IAAA,eAAe,EAAEM,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARN,CADJ;AAaC;;AAED,eAAeP,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Amplify, { Auth } from 'aws-amplify'\nimport { NavigationContainer } from '@react-navigation/native'\n\nimport awsconfig from './src/aws-exports'\nAmplify.configure(awsconfig)\n\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)))\n\nimport reducers from '../../../reducers'\n\n\n\nimport AuthNavigator from './app/componets/navigation/AuthNavigator'\nimport TabNavigator from './app/componets/navigation/TabNavigator'\nimport Initializing from './app/componets/navigation/Initializing'\n\nfunction App() {\n  const [isUserLoggedIn, setUserLoggedIn] = useState('initializing')\n\n  useEffect(() => {\n    checkAuthState()\n  }, [])\n  \n  async function checkAuthState() {\n    try {\n      await Auth.currentAuthenticatedUser()\n      console.log('✅ User is signed in')\n      setUserLoggedIn('loggedIn')\n    } catch (err) {\n      console.log('❌ User is not signed in')\n      setUserLoggedIn('loggedOut')\n    }\n  }\n  function updateAuthState(isUserLoggedIn) {\n    setUserLoggedIn(isUserLoggedIn)\n  }\n\nreturn (\n    <NavigationContainer>\n      {isUserLoggedIn === 'initializing' && <Initializing />}\n        {isUserLoggedIn === 'loggedIn' && (\n          <Provider store={store}>\n            <TabNavigator updateAuthState={updateAuthState} />\n          </Provider>\n        )}\n        {isUserLoggedIn === 'loggedOut' && (\n          <AuthNavigator updateAuthState={updateAuthState} />\n        )}\n    </NavigationContainer>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}