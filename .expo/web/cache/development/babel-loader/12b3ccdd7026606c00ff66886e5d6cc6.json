{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Storage } from 'aws-amplify';\nimport uuid from 'react-native-uuid';\nexport function s3UploadProfilePic(uri) {\n  var randomName, response, blob;\n  return _regeneratorRuntime.async(function s3UploadProfilePic$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          randomName = uuid.v1();\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(uri));\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(response.blob());\n\n        case 7:\n          blob = _context.sent;\n          return _context.abrupt(\"return\", Storage.put(\"sneaker-pics/\" + randomName + \".jpeg\", blob, {\n            contentType: 'image/jpeg'\n          }).then(function (response) {\n            return s3GetImageLink(response.key);\n          }).then(function (link) {\n            return link;\n          }).catch(function (error) {\n            return console.log('❌ Error Uploading ', error);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function s3GetImageLink(key) {\n  return _regeneratorRuntime.async(function s3GetImageLink$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          return _context2.abrupt(\"return\", Storage.get(key).then(function (link) {\n            return link;\n          }).catch(function (error) {\n            return console.log('❌ Error Getting Image Link', error);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function s3ListUserSneakerPics() {\n  return _regeneratorRuntime.async(function s3ListUserSneakerPics$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          return _context3.abrupt(\"return\", Storage.list('profile-pics/').then(function (result) {\n            return console.log(result);\n          }).catch(function (error) {\n            return console.log('❌ Error Listing Images', error);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/apis/storage.js"],"names":["Storage","uuid","s3UploadProfilePic","uri","configure","level","randomName","v1","fetch","response","blob","put","contentType","then","s3GetImageLink","key","link","catch","error","console","log","get","s3ListUserSneakerPics","list","result"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAGA,OAAO,SAAeC,kBAAf,CAAmCC,GAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACHH,UAAAA,OAAO,CAACI,SAAR,CAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAlB;AACMC,UAAAA,UAFH,GAEgBL,IAAI,CAACM,EAAL,EAFhB;AAAA;AAAA,2CAGoBC,KAAK,CAAEL,GAAF,CAHzB;;AAAA;AAGGM,UAAAA,QAHH;AAAA;AAAA,2CAIgBA,QAAQ,CAACC,IAAT,EAJhB;;AAAA;AAIGA,UAAAA,IAJH;AAAA,2CAMIV,OAAO,CACbW,GADM,mBACcL,UADd,YACiCI,IADjC,EACuC;AAAEE,YAAAA,WAAW,EAAE;AAAf,WADvC,EAENC,IAFM,CAEA,UAAAJ,QAAQ,EAAI;AAAE,mBAAOK,cAAc,CAAEL,QAAQ,CAACM,GAAX,CAArB;AAAsC,WAFpD,EAGNF,IAHM,CAGA,UAAAG,IAAI,EAAI;AAAE,mBAAOA,IAAP;AAAa,WAHvB,EAINC,KAJM,CAIC,UAAAC,KAAK;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAa,oBAAb,EAAmCF,KAAnC,CAAJ;AAAA,WAJN,CANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAeJ,cAAf,CAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AACHf,UAAAA,OAAO,CAACI,SAAR,CAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAlB;AADG,4CAGIL,OAAO,CACbqB,GADM,CACDN,GADC,EAENF,IAFM,CAEA,UAAAG,IAAI,EAAI;AAAE,mBAAOA,IAAP;AAAa,WAFvB,EAGNC,KAHM,CAGC,UAAAC,KAAK;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAa,4BAAb,EAA2CF,KAA3C,CAAJ;AAAA,WAHN,CAHJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAeI,qBAAf;AAAA;AAAA;AAAA;AAAA;AACHtB,UAAAA,OAAO,CAACI,SAAR,CAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAlB;AADG,4CAGIL,OAAO,CACTuB,IADE,CACG,eADH,EAEFV,IAFE,CAEI,UAAAW,MAAM;AAAA,mBAAIL,OAAO,CAACC,GAAR,CAAaI,MAAb,CAAJ;AAAA,WAFV,EAGFP,KAHE,CAGK,UAAAC,KAAK;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAa,wBAAb,EAAuCF,KAAvC,CAAJ;AAAA,WAHV,CAHJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Storage } from 'aws-amplify'\nimport uuid from 'react-native-uuid'\n\n//-----CREATE-----//\nexport async function s3UploadProfilePic( uri ) {\n    Storage.configure({ level: 'protected' })\n    const randomName = uuid.v1()\n    const response = await fetch( uri )\n    const blob = await response.blob()\n    \n    return Storage\n    .put(`sneaker-pics/${randomName}.jpeg`, blob, { contentType: 'image/jpeg' })\n    .then( response => { return s3GetImageLink( response.key )})\n    .then( link => { return link })\n    .catch( error => console.log( '❌ Error Uploading ', error ))  \n}\n\n//need this aws image link for each picture\nexport async function s3GetImageLink(key) {\n    Storage.configure({ level: 'protected' })\n    \n    return Storage\n    .get( key )\n    .then( link => { return link })\n    .catch( error => console.log( '❌ Error Getting Image Link', error ))   \n} \n\n//-----READ-----//\nexport async function s3ListUserSneakerPics() {\n    Storage.configure({ level: 'protected' })\n    \n    return Storage\n        .list('profile-pics/')\n        .then( result => console.log( result ))\n        .catch( error => console.log( '❌ Error Listing Images', error ))\n}"]},"metadata":{},"sourceType":"module"}