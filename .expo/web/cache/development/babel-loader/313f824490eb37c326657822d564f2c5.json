{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Storage } from 'aws-amplify';\nimport { updateUser } from \"../actions/index\";\nexport function s3ListUserSneakerPics() {\n  return _regeneratorRuntime.async(function s3ListUserSneakerPics$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Storage.list('profile-pics/', {\n            level: 'protected'\n          }).then(function (result) {\n            return console.log(result);\n          }));\n\n        case 3:\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('❌ Error Getting Images', _context.t0);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}\nexport function s3UploadProfilePic(uri) {\n  var response, blob;\n  return _regeneratorRuntime.async(function s3UploadProfilePic$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          _context2.prev = 1;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(fetch(uri));\n\n        case 4:\n          response = _context2.sent;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(response.blob());\n\n        case 7:\n          blob = _context2.sent;\n          Storage.put(\"profile-pics/profile-picture.jpeg\", blob, {\n            contentType: 'image/jpeg'\n          }).then(function (response) {\n            return s3GetProfilePic(response.key);\n          });\n          _context2.next = 14;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('❌ Error Uploading Profile Picture', _context2.t0);\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 11]], Promise);\n}\nexport function s3GetProfilePic(key) {\n  return _regeneratorRuntime.async(function s3GetProfilePic$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          _context3.prev = 1;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(Storage.get(key).then(function (response) {\n            return console.log(response);\n          }));\n\n        case 4:\n          _context3.next = 9;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.log('❌ Error Getting Profile Picture', _context3.t0);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 6]], Promise);\n}","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/apis/storage.js"],"names":["Storage","updateUser","s3ListUserSneakerPics","list","level","then","result","console","log","s3UploadProfilePic","uri","configure","fetch","response","blob","put","contentType","s3GetProfilePic","key","get"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT;AAEA,OAAO,SAAeC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEOF,OAAO,CAACG,IAAR,CAAa,eAAb,EAA8B;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAA9B,EACDC,IADC,CACI,UAAAC,MAAM;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAJ;AAAA,WADV,CAFP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMKC,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAeC,kBAAf,CAAkCC,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACHV,UAAAA,OAAO,CAACW,SAAR,CAAkB;AAAEP,YAAAA,KAAK,EAAE;AAAT,WAAlB;AADG;AAAA;AAAA,2CAIwBQ,KAAK,CAACF,GAAD,CAJ7B;;AAAA;AAIOG,UAAAA,QAJP;AAAA;AAAA,2CAKoBA,QAAQ,CAACC,IAAT,EALpB;;AAAA;AAKOA,UAAAA,IALP;AAMCd,UAAAA,OAAO,CAACe,GAAR,sCAAiDD,IAAjD,EAAuD;AACnDE,YAAAA,WAAW,EAAE;AADsC,WAAvD,EAEKX,IAFL,CAEU,UAAAQ,QAAQ;AAAA,mBAAII,eAAe,CAACJ,QAAQ,CAACK,GAAV,CAAnB;AAAA,WAFlB;AAND;AAAA;;AAAA;AAAA;AAAA;AAWCX,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;;AAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP,OAAO,SAAeS,eAAf,CAA+BC,GAA/B;AAAA;AAAA;AAAA;AAAA;AACHlB,UAAAA,OAAO,CAACW,SAAR,CAAkB;AAAEP,YAAAA,KAAK,EAAE;AAAT,WAAlB;AADG;AAAA;AAAA,2CAKOJ,OAAO,CAACmB,GAAR,CAAYD,GAAZ,EACDb,IADC,CACI,UAAAQ,QAAQ;AAAA,mBAAIN,OAAO,CAACC,GAAR,CAAYK,QAAZ,CAAJ;AAAA,WADZ,CALP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASCN,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Storage } from 'aws-amplify'\nimport { updateUser } from '../actions/index' \n\nexport async function s3ListUserSneakerPics() {\n    try {\n        await Storage.list('profile-pics/', { level: 'protected' })\n            .then(result => console.log(result))\n        } \n    catch (error) {\n            console.log('❌ Error Getting Images', error)\n        }\n}\n\nexport async function s3UploadProfilePic(uri) {\n    Storage.configure({ level: 'protected' })\n\n    try {\n        const response = await fetch(uri)\n        const blob = await response.blob()\n        Storage.put(`profile-pics/profile-picture.jpeg`, blob, {\n            contentType: 'image/jpeg', })\n            .then(response => s3GetProfilePic(response.key))\n        } \n    catch (error) {\n        console.log('❌ Error Uploading Profile Picture', error)\n        }\n}\n\nexport async function s3GetProfilePic(key) {\n    Storage.configure({ level: 'protected' })\n\n    try {\n        \n        await Storage.get(key)\n            .then(response => console.log(response))\n        } \n    catch (error) {\n        console.log('❌ Error Getting Profile Picture', error)\n        }\n}\n\n\n\n\n// Storage.configure({ level: 'protected' })\n\n// Storage.list('profile-pics/', { level: 'protected' })\n// .then(result => console.log(result))\n// .catch(err => console.log(err))\n\n// const [picture, setPicture] = useState(user.picture)\n\n// const uploadToStorage = async pathToImageFile => {\n//   try {\n//     const response = await fetch(pathToImageFile)\n//     console.log(response)\n//     const blob = await response.blob()\n//     console.log(blob)\n//     Storage.put(`profile-pics/til.jpeg`, blob, {\n//       contentType: 'image/jpeg',\n//     })\n//   } catch (err) {\n//     console.log(err)\n//   }\n// }\n\n// const getfromStorage = async () => {\n//   try {\n//     const response = await Storage.get('profile-pics/til.jpeg')\n//     setPicture(response)\n//     }\n//   catch (err) {\n//     console.error('error accessing the user image',err)\n//   }\n// }\n\n// getfromStorage()\n// console.log(picture)\n\n// const handleAdd = (uri) => {\n// uploadToStorage(uri)\n\n// }\n\n\n// const getfromStorage = async () => {\n//     try {\n//       const response = await Storage.get('profile-pics/profile-picture.jpeg')\n//       .then(updateAuth(response)\n//     }\n//     catch (err) {\n//       console.error('error accessing the user image',err)\n//     }\n//   }\n"]},"metadata":{},"sourceType":"module"}