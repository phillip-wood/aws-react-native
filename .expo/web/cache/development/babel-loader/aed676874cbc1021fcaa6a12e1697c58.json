{"ast":null,"code":"\"use strict\";\n\nvar _normalizeNativeEvent = require(\"./normalizeNativeEvent\");\n\nvar _normalizeNativeEvent2 = _interopRequireDefault(_normalizeNativeEvent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TouchHistoryMath = require(\"./TouchHistoryMath\");\n\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\nvar PanResponder = {\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    gestureState._accountsForMovesUpTo = 0;\n  },\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY);\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n  create: function create(config) {\n    var gestureState = {\n      stateID: Math.random()\n    };\n\n    PanResponder._initializeGestureState(gestureState);\n\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(e) {\n        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(normalizeEvent(e), gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {\n        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(normalizeEvent(e), gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {\n        if (e.nativeEvent.touches) {\n          if (e.nativeEvent.touches.length === 1) {\n            PanResponder._initializeGestureState(gestureState);\n          }\n        } else if (e.nativeEvent.type === 'mousedown') {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(normalizeEvent(e), gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {\n        var touchHistory = e.touchHistory;\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(normalizeEvent(e), gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(e) {\n        gestureState.x0 = currentCentroidX(e.touchHistory);\n        gestureState.y0 = currentCentroidY(e.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        config.onPanResponderGrant && config.onPanResponderGrant(normalizeEvent(e), gestureState);\n        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();\n      },\n      onResponderReject: function onResponderReject(e) {\n        config.onPanResponderReject && config.onPanResponderReject(normalizeEvent(e), gestureState);\n      },\n      onResponderRelease: function onResponderRelease(e) {\n        config.onPanResponderRelease && config.onPanResponderRelease(normalizeEvent(e), gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        config.onPanResponderStart && config.onPanResponderStart(normalizeEvent(e), gestureState);\n      },\n      onResponderMove: function onResponderMove(e) {\n        var touchHistory = e.touchHistory;\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        config.onPanResponderMove && config.onPanResponderMove(normalizeEvent(e), gestureState);\n      },\n      onResponderEnd: function onResponderEnd(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        config.onPanResponderEnd && config.onPanResponderEnd(normalizeEvent(e), gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(e) {\n        config.onPanResponderTerminate && config.onPanResponderTerminate(e, gestureState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(e) {\n        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(normalizeEvent(e), gestureState);\n      }\n    };\n    return {\n      panHandlers: panHandlers\n    };\n  }\n};\n\nfunction normalizeEvent(e) {\n  var normalizedEvent = Object.create(e);\n  normalizedEvent.nativeEvent = (0, _normalizeNativeEvent2.default)(e.nativeEvent, e.type);\n  return normalizedEvent;\n}\n\nmodule.exports = PanResponder;","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/node_modules/react-native-web/dist/apis/PanResponder/index.js"],"names":["_normalizeNativeEvent","require","_normalizeNativeEvent2","_interopRequireDefault","obj","__esModule","default","TouchHistoryMath","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","stateID","Math","random","panHandlers","onStartShouldSetResponder","e","onStartShouldSetPanResponder","undefined","normalizeEvent","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","length","type","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","normalizedEvent","Object","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n */\n\n\"use strict\";\n\nvar _normalizeNativeEvent = require('./normalizeNativeEvent');\n\nvar _normalizeNativeEvent2 = _interopRequireDefault(_normalizeNativeEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar TouchHistoryMath = require('./TouchHistoryMath');\n\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The guesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.{x,y}0 will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in UIExplorer](https://github.com/facebook/react-native/blob/master/Examples/UIExplorer/PanResponderExample.js)\n */\n\nvar PanResponder = {\n\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    // All `gestureState` accounts for timeStamps up until:\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY);\n\n    // TODO: This must be filtered intelligently.\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function create(config) {\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random()\n    };\n    PanResponder._initializeGestureState(gestureState);\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(e) {\n        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(normalizeEvent(e), gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {\n        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(normalizeEvent(e), gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (e.nativeEvent.touches) {\n          if (e.nativeEvent.touches.length === 1) {\n            PanResponder._initializeGestureState(gestureState);\n          }\n        } else if (e.nativeEvent.type === 'mousedown') {\n          PanResponder._initializeGestureState(gestureState);\n        }\n        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(normalizeEvent(e), gestureState) : false;\n      },\n\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {\n        var touchHistory = e.touchHistory;\n        // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(normalizeEvent(e), gestureState) : false;\n      },\n\n      onResponderGrant: function onResponderGrant(e) {\n        gestureState.x0 = currentCentroidX(e.touchHistory);\n        gestureState.y0 = currentCentroidY(e.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        config.onPanResponderGrant && config.onPanResponderGrant(normalizeEvent(e), gestureState);\n        // TODO: t7467124 investigate if this can be removed\n        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();\n      },\n\n      onResponderReject: function onResponderReject(e) {\n        config.onPanResponderReject && config.onPanResponderReject(normalizeEvent(e), gestureState);\n      },\n\n      onResponderRelease: function onResponderRelease(e) {\n        config.onPanResponderRelease && config.onPanResponderRelease(normalizeEvent(e), gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderStart: function onResponderStart(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        config.onPanResponderStart && config.onPanResponderStart(normalizeEvent(e), gestureState);\n      },\n\n      onResponderMove: function onResponderMove(e) {\n        var touchHistory = e.touchHistory;\n        // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        config.onPanResponderMove && config.onPanResponderMove(normalizeEvent(e), gestureState);\n      },\n\n      onResponderEnd: function onResponderEnd(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        config.onPanResponderEnd && config.onPanResponderEnd(normalizeEvent(e), gestureState);\n      },\n\n      onResponderTerminate: function onResponderTerminate(e) {\n        config.onPanResponderTerminate && config.onPanResponderTerminate(e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminationRequest: function onResponderTerminationRequest(e) {\n        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(normalizeEvent(e), gestureState);\n      }\n    };\n    return { panHandlers: panHandlers };\n  }\n};\n\nfunction normalizeEvent(e) {\n  var normalizedEvent = Object.create(e);\n  normalizedEvent.nativeEvent = (0, _normalizeNativeEvent2.default)(e.nativeEvent, e.type);\n  return normalizedEvent;\n}\n\nmodule.exports = PanResponder;"]},"metadata":{},"sourceType":"script"}