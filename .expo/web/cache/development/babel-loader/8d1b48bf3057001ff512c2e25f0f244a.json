{"ast":null,"code":"'use strict';\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar connection = _ExecutionEnvironment2.default.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection);\nvar eventTypes = ['change'];\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    connection.addEventListener(type, handler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(type, handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n    if (!connection) {\n      return;\n    }\n\n    connection.removeEventListener(type, handler);\n  },\n  fetch: function fetch() {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      window.addEventListener('online', handler.bind(null, true), false);\n      window.addEventListener('offline', handler.bind(null, false), false);\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(type, handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      window.removeEventListener('online', handler.bind(null, true), false);\n      window.removeEventListener('offline', handler.bind(null, false), false);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\nmodule.exports = NetInfo;","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/node_modules/react-native-web/dist/apis/NetInfo/index.js"],"names":["_ExecutionEnvironment","require","_ExecutionEnvironment2","_interopRequireDefault","_invariant","_invariant2","obj","__esModule","default","connection","canUseDOM","window","navigator","mozConnection","webkitConnection","eventTypes","NetInfo","addEventListener","type","handler","indexOf","console","error","remove","removeEventListener","fetch","Promise","resolve","reject","err","isConnected","bind","onLine","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Nicolas Gallagher.\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * \n */\n\nvar connection = _ExecutionEnvironment2.default.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection);\n\nvar eventTypes = ['change'];\n\n/**\n * Navigator online: https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n * Network Connection API: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    connection.addEventListener(type, handler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(type, handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n    if (!connection) {\n      return;\n    }\n    connection.removeEventListener(type, handler);\n  },\n  fetch: function fetch() {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      window.addEventListener('online', handler.bind(null, true), false);\n      window.addEventListener('offline', handler.bind(null, false), false);\n\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(type, handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      (0, _invariant2.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      window.removeEventListener('online', handler.bind(null, true), false);\n      window.removeEventListener('offline', handler.bind(null, false), false);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\n\nmodule.exports = NetInfo;"]},"metadata":{},"sourceType":"script"}