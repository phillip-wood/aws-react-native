{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/phil/Workspace/aws-react-native/app/screens/profile/UserDetails.js\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { connect } from \"react-redux\";\nimport Amplify, { Storage } from 'aws-amplify';\nimport colors from \"../../config/colors\";\nimport Screen from \"../../componets/Screen\";\nimport ImageInputList from \"../../componets/ImageInputList\";\n\nfunction UserDetails(_ref) {\n  var navigation = _ref.navigation,\n      user = _ref.user;\n  Storage.configure({\n    level: 'protected'\n  });\n  Storage.list('profile-pics/', {\n    level: 'protected'\n  }).then(function (result) {\n    return console.log(result);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n\n  var _useState = useState('https://reactnative.dev/img/tiny_logo.png'),\n      _useState2 = _slicedToArray(_useState, 2),\n      picture = _useState2[0],\n      setPicture = _useState2[1];\n\n  var uploadToStorage = function uploadToStorage(pathToImageFile) {\n    var response, blob;\n    return _regeneratorRuntime.async(function uploadToStorage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(pathToImageFile));\n\n          case 3:\n            response = _context.sent;\n            console.log(response);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 7:\n            blob = _context.sent;\n            console.log(blob);\n            Storage.put(\"profile-pics/test3.png\", 'Protected Content', blob, {\n              level: 'protected',\n              contentType: 'image/png'\n            });\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  var getfromStorage = function getfromStorage() {\n    var response;\n    return _regeneratorRuntime.async(function getfromStorage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Storage.get('profile-pics/test3.png'));\n\n          case 3:\n            response = _context2.sent;\n            console.log(response);\n            setPicture(response);\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error('error accessing the user image', _context2.t0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  getfromStorage();\n  console;\n\n  var handleAdd = function handleAdd(uri) {\n    uploadToStorage(uri);\n  };\n\n  return React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }, React.createElement(ImageInputList, {\n    imageUris: [picture],\n    onAddImage: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }\n  }));\n}\n\nfunction mapStateToProps(globalState) {\n  return {\n    user: globalState.user\n  };\n}\n\nexport default connect(mapStateToProps)(UserDetails);\nvar styles = StyleSheet.create({\n  screen: {\n    backgroundColor: colors.white\n  },\n  container: {\n    marginVertical: 20\n  },\n  logo: {\n    width: 66,\n    height: 58\n  }\n});","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/app/screens/profile/UserDetails.js"],"names":["React","useState","connect","Amplify","Storage","colors","Screen","ImageInputList","UserDetails","navigation","user","configure","level","list","then","result","console","log","catch","err","picture","setPicture","uploadToStorage","pathToImageFile","fetch","response","blob","put","contentType","getfromStorage","get","error","handleAdd","uri","mapStateToProps","globalState","styles","StyleSheet","create","screen","backgroundColor","white","container","marginVertical","logo","width","height"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\nimport { StyleSheet, Image } from \"react-native\"\nimport { connect } from \"react-redux\"\nimport Amplify, { Storage } from 'aws-amplify'\n// import { v4 as uuidv4 } from 'uuid'\n\nimport colors from \"../../config/colors\"\nimport Screen from \"../../componets/Screen\"\nimport ImageInputList from \"../../componets/ImageInputList\"\n\nfunction UserDetails({ navigation, user }) {\n  \n  Storage.configure({ level: 'protected' })\n\n  Storage.list('profile-pics/', { level: 'protected' })\n  .then(result => console.log(result))\n  .catch(err => console.log(err))\n\n  const [picture, setPicture] = useState('https://reactnative.dev/img/tiny_logo.png')\n\n  const uploadToStorage = async pathToImageFile => {\n    try {\n      const response = await fetch(pathToImageFile)\n      console.log(response)\n      const blob = await response.blob()\n      console.log(blob)\n      Storage.put(`profile-pics/test3.png`, 'Protected Content', blob, {\n        level: 'protected',\n        contentType: 'image/png',\n      })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const getfromStorage = async () => {\n    try {\n      const response = await Storage.get('profile-pics/test3.png')\n      console.log(response)\n      setPicture(response)\n      }\n    catch (err) {\n      console.error('error accessing the user image',err)\n    }\n  }\n\n  getfromStorage()\n  console\n\nconst handleAdd = (uri) => {\n  uploadToStorage(uri)\n  \n}\n\n// const handleRemove = (uri) => {\n//   setFieldValue(\n//     name,\n//     imageUris.filter((imageUri) => imageUri !== uri)\n//   )\n// }\n\nreturn (\n  <Screen>\n    {/* <Image\n    style={styles.logo}\n    options=\"{'level':'private'}\"\n    source={{uri:uri}}\n    />   */}\n  <ImageInputList\n      imageUris={[picture]}\n      onAddImage={handleAdd}\n      // onRemoveImage={handleRemove}\n    />\n    {/* <ErrorMessage error={errors[name]} visible={touched[name]} /> */}\n  </Screen>\n)\n}\n\nfunction mapStateToProps (globalState) {\n  return {\n    user:globalState.user\n  }\n}\n\nexport default connect(mapStateToProps)(UserDetails)\n\nconst styles = StyleSheet.create({\n  screen: {\n    backgroundColor: colors.white,\n  },\n  container: {\n    marginVertical: 20,\n  },\n  logo: {\n    width: 66,\n    height: 58,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}