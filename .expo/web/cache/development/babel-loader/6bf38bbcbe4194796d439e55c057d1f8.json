{"ast":null,"code":"import { API, graphqlOperation } from \"aws-amplify\";\nimport { setSneakers, setUserSneakers } from \"../actions/index\";\nimport * as mutations from \"../src/graphql/mutations\";\nimport * as queries from \"../\";\nexport function dbCreateUserSneaker(user_id, condition, awsImageLinksArray, userSneakerSneakerId) {\n  var userSneakerDetails = {\n    user_id: user_id,\n    condition: condition,\n    images: awsImageLinksArray,\n    userSneakerSneakerId: userSneakerSneakerId\n  };\n  return API.graphql(graphqlOperation(mutations.createUserSneaker, {\n    input: userSneakerDetails\n  })).then(function (result) {\n    return console.log(result);\n  }).catch(function (error) {\n    return console.log('❌ Error Adding User Sneaker ', error);\n  });\n}\nexport function dbCreateSneaker(brand, model, submodel, colorway) {\n  var sneakerDetails = {\n    brand: brand,\n    model: model,\n    submodel: submodel,\n    colorway: colorway\n  };\n  return API.graphql(graphqlOperation(mutations.createSneaker, {\n    input: sneakerDetails\n  })).then(function (result) {\n    return console.log(result);\n  }).catch(function (error) {\n    return console.log('❌ Error Adding User Sneaker ', error);\n  });\n}\nexport function dbReadSneakers() {\n  return function (dispatch) {\n    return API.graphql({\n      query: queries.listSneakers\n    }).then(function (sneakers) {\n      dispatch(setSneakers(sneakers.data.listSneakers.items));\n      return null;\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}\nexport function dbReadUserSneakers(userId) {\n  var filter = {\n    user_id: {\n      eq: userId\n    }\n  };\n  return function (dispatch) {\n    return API.graphql({\n      query: queries.listUserSneakers\n    }).then(function (userSneakers) {\n      dispatch(setUserSneakers(userSneakers.data.listUserSneakers.items));\n      return null;\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/apis/database.js"],"names":["API","graphqlOperation","setSneakers","setUserSneakers","mutations","queries","dbCreateUserSneaker","user_id","condition","awsImageLinksArray","userSneakerSneakerId","userSneakerDetails","images","graphql","createUserSneaker","input","then","result","console","log","catch","error","dbCreateSneaker","brand","model","submodel","colorway","sneakerDetails","createSneaker","dbReadSneakers","dispatch","query","listSneakers","sneakers","data","items","err","dbReadUserSneakers","userId","filter","eq","listUserSneakers","userSneakers"],"mappings":"AAAA,SAASA,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AAEA,SAASC,WAAT,EAAsBC,eAAtB;AACA,OAAO,KAAKC,SAAZ;AACA,OAAO,KAAKC,OAAZ;AAGA,OAAO,SAASC,mBAAT,CAA8BC,OAA9B,EAAuCC,SAAvC,EAAkDC,kBAAlD,EAAsEC,oBAAtE,EAA6F;AAChG,MAAMC,kBAAkB,GAAG;AACvBJ,IAAAA,OAAO,EAAEA,OADc;AAEvBC,IAAAA,SAAS,EAAEA,SAFY;AAGvBI,IAAAA,MAAM,EAAEH,kBAHe;AAIvBC,IAAAA,oBAAoB,EAAEA;AAJC,GAA3B;AAOA,SAAOV,GAAG,CACLa,OADE,CACOZ,gBAAgB,CAAEG,SAAS,CAACU,iBAAZ,EAA+B;AAAEC,IAAAA,KAAK,EAAEJ;AAAT,GAA/B,CADvB,EAEFK,IAFE,CAEI,UAAAC,MAAM;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAaF,MAAb,CAAJ;AAAA,GAFV,EAGFG,KAHE,CAGK,UAAAC,KAAK;AAAA,WAAIH,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CE,KAA5C,CAAJ;AAAA,GAHV,CAAP;AAIH;AAED,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,QAAxC,EAAkDC,QAAlD,EAA6D;AAChE,MAAMC,cAAc,GAAG;AACnBJ,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,KAAK,EAAEA,KAFY;AAGnBC,IAAAA,QAAQ,EAAEA,QAHS;AAInBC,IAAAA,QAAQ,EAAEA;AAJS,GAAvB;AAOA,SAAO1B,GAAG,CACLa,OADE,CACOZ,gBAAgB,CAAEG,SAAS,CAACwB,aAAZ,EAA2B;AAAEb,IAAAA,KAAK,EAAEY;AAAT,GAA3B,CADvB,EAEFX,IAFE,CAEI,UAAAC,MAAM;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAaF,MAAb,CAAJ;AAAA,GAFV,EAGFG,KAHE,CAGK,UAAAC,KAAK;AAAA,WAAIH,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CE,KAA5C,CAAJ;AAAA,GAHV,CAAP;AAIH;AAID,OAAO,SAASQ,cAAT,GAA2B;AAC9B,SAAO,UAAAC,QAAQ,EAAI;AACf,WAAO9B,GAAG,CACTa,OADM,CACE;AAAEkB,MAAAA,KAAK,EAAE1B,OAAO,CAAC2B;AAAjB,KADF,EAENhB,IAFM,CAEA,UAAAiB,QAAQ,EAAI;AACfH,MAAAA,QAAQ,CAAE5B,WAAW,CAAE+B,QAAQ,CAACC,IAAT,CAAcF,YAAd,CAA2BG,KAA7B,CAAb,CAAR;AACA,aAAO,IAAP;AACH,KALM,EAMNf,KANM,CAMC,UAAAgB,GAAG;AAAA,aAAIlB,OAAO,CAACC,GAAR,CAAaiB,GAAb,CAAJ;AAAA,KANJ,CAAP;AAOH,GARD;AASH;AAED,OAAO,SAASC,kBAAT,CAA8BC,MAA9B,EAAuC;AAC1C,MAAMC,MAAM,GAAG;AAAEhC,IAAAA,OAAO,EAAE;AAAEiC,MAAAA,EAAE,EAACF;AAAL;AAAX,GAAf;AACA,SAAO,UAAAR,QAAQ,EAAI;AACf,WAAO9B,GAAG,CACLa,OADE,CACM;AAAEkB,MAAAA,KAAK,EAAE1B,OAAO,CAACoC;AAAjB,KADN,EAEFzB,IAFE,CAEI,UAAA0B,YAAY,EAAI;AACnBZ,MAAAA,QAAQ,CAAE3B,eAAe,CAAEuC,YAAY,CAACR,IAAb,CAAkBO,gBAAlB,CAAmCN,KAArC,CAAjB,CAAR;AACA,aAAO,IAAP;AACH,KALE,EAMFf,KANE,CAMK,UAAAgB,GAAG;AAAA,aAAIlB,OAAO,CAACC,GAAR,CAAaiB,GAAb,CAAJ;AAAA,KANR,CAAP;AAOH,GARD;AASH","sourcesContent":["import { API, graphqlOperation } from \"aws-amplify\"\n\nimport { setSneakers, setUserSneakers } from '../actions/index'\nimport * as mutations from '../src/graphql/mutations'\nimport * as queries from \"../\"\n\n//-----CREATE-----//\nexport function dbCreateUserSneaker( user_id, condition, awsImageLinksArray, userSneakerSneakerId ) {\n    const userSneakerDetails = {\n        user_id: user_id,\n        condition: condition,\n        images: awsImageLinksArray,\n        userSneakerSneakerId: userSneakerSneakerId\n    }\n \n    return API\n        .graphql( graphqlOperation( mutations.createUserSneaker, { input: userSneakerDetails }))\n        .then( result => console.log( result ))\n        .catch( error => console.log('❌ Error Adding User Sneaker ', error) )  \n}\n\nexport function dbCreateSneaker( brand, model, submodel, colorway ) {\n    const sneakerDetails = {\n        brand: brand,\n        model: model,\n        submodel: submodel,\n        colorway: colorway\n    }\n \n    return API\n        .graphql( graphqlOperation( mutations.createSneaker, { input: sneakerDetails }))\n        .then( result => console.log( result ))\n        .catch( error => console.log('❌ Error Adding User Sneaker ', error ))  \n}\n\n//-----READ-----//\n\nexport function dbReadSneakers () {\n    return dispatch => {\n        return API\n        .graphql({ query: queries.listSneakers })\n        .then( sneakers => { \n            dispatch( setSneakers( sneakers.data.listSneakers.items ))\n            return null\n        })\n        .catch( err => console.log( err ))\n    }\n}\n  \nexport function dbReadUserSneakers ( userId ) {\n    const filter = { user_id: { eq:userId }}\n    return dispatch => {\n        return API\n            .graphql({ query: queries.listUserSneakers })\n            .then( userSneakers => { \n                dispatch( setUserSneakers( userSneakers.data.listUserSneakers.items ))\n                return null\n            })\n            .catch( err => console.log( err ))\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}