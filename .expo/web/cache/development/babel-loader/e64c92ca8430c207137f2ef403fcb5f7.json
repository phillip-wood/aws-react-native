{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/phil/Workspace/aws-react-native/app/screens/profile/UserDetails.js\";\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { connect } from \"react-redux\";\nimport Amplify, { Storage } from 'aws-amplify';\nimport colors from \"../../config/colors\";\nimport Screen from \"../../componets/Screen\";\nimport ImageInputList from \"../../componets/ImageInputList\";\n\nfunction UserDetails(_ref) {\n  var navigation = _ref.navigation,\n      user = _ref.user;\n  Storage.configure({\n    level: 'protected'\n  });\n  Storage.list('photos/', {\n    level: 'protected',\n    identityId: 'xxxxxxx'\n  }).then(function (result) {\n    return console.log(result);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n\n  var uploadToStorage = function uploadToStorage(pathToImageFile) {\n    var response, blob;\n    return _regeneratorRuntime.async(function uploadToStorage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(pathToImageFile));\n\n          case 3:\n            response = _context.sent;\n            console.log(response);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 7:\n            blob = _context.sent;\n            console.log(blob);\n            Storage.put(\"test2.png\", 'Protected Content', blob, {\n              level: 'protected',\n              contentType: 'image/png'\n            });\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  function userPic() {\n    var userProfileUrl;\n    return _regeneratorRuntime.async(function userPic$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Storage.get('test2.png'));\n\n          case 3:\n            userProfileUrl = _context2.sent;\n            console.log(userProfileUrl);\n            return _context2.abrupt(\"return\", userProfileUrl);\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error('error accessing the user image', err);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  var handleAdd = function handleAdd(uri) {\n    uploadToStorage(uri);\n  };\n\n  return React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }\n  }, React.createElement(ImageInputList, {\n    imageUris: ['https://reactnative.dev/img/tiny_logo.png'],\n    onAddImage: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 3\n    }\n  }));\n}\n\nfunction mapStateToProps(globalState) {\n  return {\n    user: globalState.user\n  };\n}\n\nexport default connect(mapStateToProps)(UserDetails);\nvar styles = StyleSheet.create({\n  screen: {\n    backgroundColor: colors.white\n  },\n  container: {\n    marginVertical: 20\n  },\n  logo: {\n    width: 66,\n    height: 58\n  }\n});","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/app/screens/profile/UserDetails.js"],"names":["React","connect","Amplify","Storage","colors","Screen","ImageInputList","UserDetails","navigation","user","configure","level","list","identityId","then","result","console","log","catch","err","uploadToStorage","pathToImageFile","fetch","response","blob","put","contentType","userPic","get","userProfileUrl","error","handleAdd","uri","mapStateToProps","globalState","styles","StyleSheet","create","screen","backgroundColor","white","container","marginVertical","logo","width","height"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { StyleSheet, Image } from \"react-native\"\nimport { connect } from \"react-redux\"\nimport Amplify, { Storage } from 'aws-amplify'\n// import { v4 as uuidv4 } from 'uuid'\n\nimport colors from \"../../config/colors\"\nimport Screen from \"../../componets/Screen\"\nimport ImageInputList from \"../../componets/ImageInputList\"\n\n\n\nfunction UserDetails({ navigation, user }) {\n\n  Storage.configure({ level: 'protected' })\n\n  Storage.list('photos/', { \n    level: 'protected', \n    identityId: 'xxxxxxx' // the identityId of that user\n  })\n  .then(result => console.log(result))\n  .catch(err => console.log(err));\n\n  // const [picture, setPicture] = useState('')\n\n  const uploadToStorage = async pathToImageFile => {\n    try {\n      const response = await fetch(pathToImageFile)\n      console.log(response)\n      const blob = await response.blob()\n      console.log(blob)\n      Storage.put(`test2.png`, 'Protected Content', blob, {\n        level: 'protected',\n        contentType: 'image/png',\n      })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n\n async function userPic() {\n  try {\n    const userProfileUrl = await Storage.get('test2.png')\n    console.log(userProfileUrl)\n    return userProfileUrl\n  } catch (error) {\n    console.error('error accessing the user image',err)\n  }\n }\n  \n\n\n\nconst handleAdd = (uri) => {\n  uploadToStorage(uri)\n  \n}\n\n// const handleRemove = (uri) => {\n//   setFieldValue(\n//     name,\n//     imageUris.filter((imageUri) => imageUri !== uri)\n//   )\n// }\n\nreturn (\n  <Screen>\n    {/* <Image\n    style={styles.logo}\n    options=\"{'level':'private'}\"\n    source={{uri:uri}}\n    />   */}\n  <ImageInputList\n      imageUris={['https://reactnative.dev/img/tiny_logo.png']}\n      onAddImage={handleAdd}\n      // onRemoveImage={handleRemove}\n    />\n    {/* <ErrorMessage error={errors[name]} visible={touched[name]} /> */}\n  </Screen>\n)\n}\n\nfunction mapStateToProps (globalState) {\n  return {\n    user:globalState.user\n  }\n}\n\nexport default connect(mapStateToProps)(UserDetails)\n\nconst styles = StyleSheet.create({\n  screen: {\n    backgroundColor: colors.white,\n  },\n  container: {\n    marginVertical: 20,\n  },\n  logo: {\n    width: 66,\n    height: 58,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}