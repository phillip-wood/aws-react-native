{"ast":null,"code":"import { API, graphqlOperation } from \"aws-amplify\";\nimport { setSneakers, setUserInfo, setUserSneakers, updateUserInfoImage } from \"../actions/index\";\nimport * as mutations from \"../src/graphql/mutations\";\nimport * as queries from \"../src/graphql/queries\";\nexport function dbCreateSneaker(brand, model, submodel, colorway) {\n  var sneakerDetails = {\n    brand: brand,\n    model: model,\n    submodel: submodel,\n    colorway: colorway\n  };\n  return API.graphql(graphqlOperation(mutations.createSneaker, {\n    input: sneakerDetails\n  })).then(function (result) {\n    return console.log(result);\n  }).catch(function (error) {\n    return console.log('❌ Error Adding User Sneaker ', error);\n  });\n}\nexport function dbCreateUserSneaker(user_id, condition, awsImageLinksArray, userSneakerSneakerId) {\n  var userSneakerDetails = {\n    user_id: user_id,\n    condition: condition,\n    images: awsImageLinksArray,\n    userSneakerSneakerId: userSneakerSneakerId\n  };\n  return API.graphql(graphqlOperation(mutations.createUserSneaker, {\n    input: userSneakerDetails\n  })).then(function (result) {\n    return console.log(result);\n  }).catch(function (error) {\n    return console.log('❌ Error Adding User Sneaker ', error);\n  });\n}\nexport function dbCreateUserInfo(user_id, image) {\n  var userInfoDetails = {\n    user_id: user_id,\n    image: image,\n    messa: messa\n  };\n  return API.graphql(graphqlOperation(mutations.createUserInfo, {\n    input: userInfoDetails\n  })).then(function (result) {\n    return console.log(result);\n  }).catch(function (error) {\n    return console.log('❌ Error Adding User Info ', error);\n  });\n}\nexport function dbReadSneakers() {\n  return function (dispatch) {\n    return API.graphql(graphqlOperation(queries.listSneakers)).then(function (sneakers) {\n      dispatch(setSneakers(sneakers.data.listSneakers.items));\n      return null;\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}\nexport function dbReadUserSneakers(user_id) {\n  var filter = {\n    user_id: {\n      eq: user_id\n    }\n  };\n  return function (dispatch) {\n    return API.graphql({\n      query: queries.listUserSneakers,\n      variables: {\n        filter: filter\n      }\n    }).then(function (userSneakers) {\n      dispatch(setUserSneakers(userSneakers.data.listUserSneakers.items));\n      return null;\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}\nexport function dbReadUserInfo(user_id) {\n  var filter = {\n    user_id: {\n      eq: user_id\n    }\n  };\n  return function (dispatch) {\n    return API.graphql({\n      query: queries.listUserInfos,\n      variables: {\n        filter: filter\n      }\n    }).then(function (userInfo) {\n      dispatch(setUserInfo(userInfo.data.listUserInfos.items[0]));\n      return null;\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}\nexport function dbReadUserMessages(user_id) {\n  var filter = {\n    user_id: {\n      eq: user_id\n    }\n  };\n  return function (dispatch) {\n    return API.graphql({\n      query: queries.listUserInfos,\n      variables: {\n        filter: filter\n      }\n    }).then(function (userInfo) {\n      dispatch(setUserInfo(userInfo.data.listUserInfos.items[0]));\n      return null;\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}\nexport function dbUpdateUserInfo(link, userInfo) {\n  var newUserInfo = {\n    id: userInfo.id,\n    image: link,\n    _version: userInfo._version\n  };\n  return function (dispatch) {\n    return API.graphql(graphqlOperation(mutations.updateUserInfo, {\n      input: newUserInfo\n    })).then(function (userInfo) {\n      dispatch(updateUserInfoImage(userInfo.data.updateUserInfo.image));\n      return null;\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/apis/database.js"],"names":["API","graphqlOperation","setSneakers","setUserInfo","setUserSneakers","updateUserInfoImage","mutations","queries","dbCreateSneaker","brand","model","submodel","colorway","sneakerDetails","graphql","createSneaker","input","then","result","console","log","catch","error","dbCreateUserSneaker","user_id","condition","awsImageLinksArray","userSneakerSneakerId","userSneakerDetails","images","createUserSneaker","dbCreateUserInfo","image","userInfoDetails","messa","createUserInfo","dbReadSneakers","dispatch","listSneakers","sneakers","data","items","err","dbReadUserSneakers","filter","eq","query","listUserSneakers","variables","userSneakers","dbReadUserInfo","listUserInfos","userInfo","dbReadUserMessages","dbUpdateUserInfo","link","newUserInfo","id","_version","updateUserInfo"],"mappings":"AAAA,SAASA,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,eAAnC,EAAoDC,mBAApD;AACA,OAAO,KAAKC,SAAZ;AACA,OAAO,KAAKC,OAAZ;AAGA,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,QAAxC,EAAkDC,QAAlD,EAA6D;AAChE,MAAMC,cAAc,GAAG;AACnBJ,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,KAAK,EAAEA,KAFY;AAGnBC,IAAAA,QAAQ,EAAEA,QAHS;AAInBC,IAAAA,QAAQ,EAAEA;AAJS,GAAvB;AAOA,SAAOZ,GAAG,CACLc,OADE,CACOb,gBAAgB,CAAEK,SAAS,CAACS,aAAZ,EAA2B;AAAEC,IAAAA,KAAK,EAAEH;AAAT,GAA3B,CADvB,EAEFI,IAFE,CAEI,UAAAC,MAAM;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAaF,MAAb,CAAJ;AAAA,GAFV,EAGFG,KAHE,CAGK,UAAAC,KAAK;AAAA,WAAIH,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CE,KAA5C,CAAJ;AAAA,GAHV,CAAP;AAIH;AAED,OAAO,SAASC,mBAAT,CAA8BC,OAA9B,EAAuCC,SAAvC,EAAkDC,kBAAlD,EAAsEC,oBAAtE,EAA6F;AAChG,MAAMC,kBAAkB,GAAG;AACvBJ,IAAAA,OAAO,EAAEA,OADc;AAEvBC,IAAAA,SAAS,EAAEA,SAFY;AAGvBI,IAAAA,MAAM,EAAEH,kBAHe;AAIvBC,IAAAA,oBAAoB,EAAEA;AAJC,GAA3B;AAOA,SAAO3B,GAAG,CACLc,OADE,CACOb,gBAAgB,CAAEK,SAAS,CAACwB,iBAAZ,EAA+B;AAAEd,IAAAA,KAAK,EAAEY;AAAT,GAA/B,CADvB,EAEFX,IAFE,CAEI,UAAAC,MAAM;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAaF,MAAb,CAAJ;AAAA,GAFV,EAGFG,KAHE,CAGK,UAAAC,KAAK;AAAA,WAAIH,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CE,KAA5C,CAAJ;AAAA,GAHV,CAAP;AAIH;AAED,OAAO,SAASS,gBAAT,CAA2BP,OAA3B,EAAoCQ,KAApC,EAA4C;AAC/C,MAAMC,eAAe,GAAG;AACpBT,IAAAA,OAAO,EAAEA,OADW;AAEpBQ,IAAAA,KAAK,EAAEA,KAFa;AAGpBE,IAAAA,KAAK,EAALA;AAHoB,GAAxB;AAMA,SAAOlC,GAAG,CACLc,OADE,CACOb,gBAAgB,CAAEK,SAAS,CAAC6B,cAAZ,EAA4B;AAAEnB,IAAAA,KAAK,EAAEiB;AAAT,GAA5B,CADvB,EAEFhB,IAFE,CAEI,UAAAC,MAAM;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAaF,MAAb,CAAJ;AAAA,GAFV,EAGFG,KAHE,CAGK,UAAAC,KAAK;AAAA,WAAIH,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCE,KAAzC,CAAJ;AAAA,GAHV,CAAP;AAIH;AAID,OAAO,SAASc,cAAT,GAA2B;AAC9B,SAAO,UAAAC,QAAQ,EAAI;AACf,WAAOrC,GAAG,CACTc,OADM,CACGb,gBAAgB,CAAEM,OAAO,CAAC+B,YAAV,CADnB,EAENrB,IAFM,CAEA,UAAAsB,QAAQ,EAAI;AACfF,MAAAA,QAAQ,CAAEnC,WAAW,CAAEqC,QAAQ,CAACC,IAAT,CAAcF,YAAd,CAA2BG,KAA7B,CAAb,CAAR;AACA,aAAO,IAAP;AACH,KALM,EAMNpB,KANM,CAMC,UAAAqB,GAAG;AAAA,aAAIvB,OAAO,CAACC,GAAR,CAAasB,GAAb,CAAJ;AAAA,KANJ,CAAP;AAOH,GARD;AASH;AAED,OAAO,SAASC,kBAAT,CAA8BnB,OAA9B,EAAwC;AAC3C,MAAMoB,MAAM,GAAG;AAAEpB,IAAAA,OAAO,EAAE;AAAEqB,MAAAA,EAAE,EAACrB;AAAL;AAAX,GAAf;AACA,SAAO,UAAAa,QAAQ,EAAI;AACf,WAAOrC,GAAG,CACLc,OADE,CACO;AAAEgC,MAAAA,KAAK,EAAEvC,OAAO,CAACwC,gBAAjB;AAAmCC,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,MAAM,EAAEA;AAAV;AAA9C,KADP,EAEF3B,IAFE,CAEI,UAAAgC,YAAY,EAAI;AACnBZ,MAAAA,QAAQ,CAAEjC,eAAe,CAAE6C,YAAY,CAACT,IAAb,CAAkBO,gBAAlB,CAAmCN,KAArC,CAAjB,CAAR;AACA,aAAO,IAAP;AACH,KALE,EAMFpB,KANE,CAMK,UAAAqB,GAAG;AAAA,aAAIvB,OAAO,CAACC,GAAR,CAAasB,GAAb,CAAJ;AAAA,KANR,CAAP;AAOH,GARD;AASH;AAED,OAAO,SAASQ,cAAT,CAA0B1B,OAA1B,EAAoC;AACvC,MAAMoB,MAAM,GAAG;AAAEpB,IAAAA,OAAO,EAAE;AAAEqB,MAAAA,EAAE,EAACrB;AAAL;AAAX,GAAf;AACA,SAAO,UAAAa,QAAQ,EAAI;AACf,WAAOrC,GAAG,CACLc,OADE,CACO;AAAEgC,MAAAA,KAAK,EAAEvC,OAAO,CAAC4C,aAAjB;AAAgCH,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,MAAM,EAAEA;AAAV;AAA3C,KADP,EAEF3B,IAFE,CAEI,UAAAmC,QAAQ,EAAI;AACff,MAAAA,QAAQ,CAAElC,WAAW,CAAEiD,QAAQ,CAACZ,IAAT,CAAcW,aAAd,CAA4BV,KAA5B,CAAkC,CAAlC,CAAF,CAAb,CAAR;AACA,aAAO,IAAP;AACH,KALE,EAMFpB,KANE,CAMK,UAAAqB,GAAG;AAAA,aAAIvB,OAAO,CAACC,GAAR,CAAasB,GAAb,CAAJ;AAAA,KANR,CAAP;AAOH,GARD;AASH;AAED,OAAO,SAASW,kBAAT,CAA8B7B,OAA9B,EAAwC;AAC3C,MAAMoB,MAAM,GAAG;AAAEpB,IAAAA,OAAO,EAAE;AAAEqB,MAAAA,EAAE,EAACrB;AAAL;AAAX,GAAf;AACA,SAAO,UAAAa,QAAQ,EAAI;AACf,WAAOrC,GAAG,CACLc,OADE,CACO;AAAEgC,MAAAA,KAAK,EAAEvC,OAAO,CAAC4C,aAAjB;AAAgCH,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,MAAM,EAAEA;AAAV;AAA3C,KADP,EAEF3B,IAFE,CAEI,UAAAmC,QAAQ,EAAI;AACff,MAAAA,QAAQ,CAAElC,WAAW,CAAEiD,QAAQ,CAACZ,IAAT,CAAcW,aAAd,CAA4BV,KAA5B,CAAkC,CAAlC,CAAF,CAAb,CAAR;AACA,aAAO,IAAP;AACH,KALE,EAMFpB,KANE,CAMK,UAAAqB,GAAG;AAAA,aAAIvB,OAAO,CAACC,GAAR,CAAasB,GAAb,CAAJ;AAAA,KANR,CAAP;AAOH,GARD;AASH;AAID,OAAO,SAASY,gBAAT,CAA4BC,IAA5B,EAAkCH,QAAlC,EAA6C;AAChD,MAAMI,WAAW,GAAG;AAChBC,IAAAA,EAAE,EAAEL,QAAQ,CAACK,EADG;AAEhBzB,IAAAA,KAAK,EAAEuB,IAFS;AAGhBG,IAAAA,QAAQ,EAAEN,QAAQ,CAACM;AAHH,GAApB;AAMA,SAAO,UAAArB,QAAQ,EAAI;AACf,WAAOrC,GAAG,CACLc,OADE,CACOb,gBAAgB,CAAEK,SAAS,CAACqD,cAAZ,EAA4B;AAAE3C,MAAAA,KAAK,EAAEwC;AAAT,KAA5B,CADvB,EAEFvC,IAFE,CAEI,UAAAmC,QAAQ,EAAI;AACff,MAAAA,QAAQ,CAAEhC,mBAAmB,CAAE+C,QAAQ,CAACZ,IAAT,CAAcmB,cAAd,CAA6B3B,KAA/B,CAArB,CAAR;AACA,aAAO,IAAP;AACH,KALE,EAMFX,KANE,CAMK,UAAAqB,GAAG;AAAA,aAAIvB,OAAO,CAACC,GAAR,CAAasB,GAAb,CAAJ;AAAA,KANR,CAAP;AAOH,GARD;AASH","sourcesContent":["import { API, graphqlOperation } from \"aws-amplify\"\n\nimport { setSneakers, setUserInfo, setUserSneakers, updateUserInfoImage } from '../actions/index'\nimport * as mutations from '../src/graphql/mutations'\nimport * as queries from \"../src/graphql/queries\"\n\n//-----CREATE-----//\nexport function dbCreateSneaker( brand, model, submodel, colorway ) {\n    const sneakerDetails = {\n        brand: brand,\n        model: model,\n        submodel: submodel,\n        colorway: colorway\n    }\n \n    return API\n        .graphql( graphqlOperation( mutations.createSneaker, { input: sneakerDetails }))\n        .then( result => console.log( result ))\n        .catch( error => console.log('❌ Error Adding User Sneaker ', error ))  \n}\n\nexport function dbCreateUserSneaker( user_id, condition, awsImageLinksArray, userSneakerSneakerId ) {\n    const userSneakerDetails = {\n        user_id: user_id,\n        condition: condition,\n        images: awsImageLinksArray,\n        userSneakerSneakerId: userSneakerSneakerId\n    }\n \n    return API\n        .graphql( graphqlOperation( mutations.createUserSneaker, { input: userSneakerDetails }))\n        .then( result => console.log( result ))\n        .catch( error => console.log('❌ Error Adding User Sneaker ', error) )  \n}\n\nexport function dbCreateUserInfo( user_id, image ) {\n    const userInfoDetails = {\n        user_id: user_id,\n        image: image,\n        messa\n    }\n \n    return API\n        .graphql( graphqlOperation( mutations.createUserInfo, { input: userInfoDetails }))\n        .then( result => console.log( result ))\n        .catch( error => console.log('❌ Error Adding User Info ', error ))  \n}\n\n\n//-----READ-----//\nexport function dbReadSneakers () {\n    return dispatch => {\n        return API\n        .graphql( graphqlOperation( queries.listSneakers ))\n        .then( sneakers => { \n            dispatch( setSneakers( sneakers.data.listSneakers.items ))\n            return null\n        })\n        .catch( err => console.log( err ))\n    }\n}\n  \nexport function dbReadUserSneakers ( user_id ) {\n    const filter = { user_id: { eq:user_id }}\n    return dispatch => {\n        return API\n            .graphql( { query: queries.listUserSneakers, variables: { filter: filter }})\n            .then( userSneakers => { \n                dispatch( setUserSneakers( userSneakers.data.listUserSneakers.items ))\n                return null\n            })\n            .catch( err => console.log( err ))\n    }\n}\n\nexport function dbReadUserInfo ( user_id ) {\n    const filter = { user_id: { eq:user_id }}\n    return dispatch => {\n        return API\n            .graphql( { query: queries.listUserInfos, variables: { filter: filter }})\n            .then( userInfo => {\n                dispatch( setUserInfo( userInfo.data.listUserInfos.items[0] ))\n                return null\n            })\n            .catch( err => console.log( err ))\n    }\n}\n\nexport function dbReadUserMessages ( user_id ) {\n    const filter = { user_id: { eq:user_id }}\n    return dispatch => {\n        return API\n            .graphql( { query: queries.listUserInfos, variables: { filter: filter }})\n            .then( userInfo => {\n                dispatch( setUserInfo( userInfo.data.listUserInfos.items[0] ))\n                return null\n            })\n            .catch( err => console.log( err ))\n    }\n}\n\n//-----UPDATE-----//\n\nexport function dbUpdateUserInfo ( link, userInfo ) {\n    const newUserInfo = {\n        id: userInfo.id,\n        image: link,\n        _version: userInfo._version\n    }\n\n    return dispatch => {\n        return API\n            .graphql( graphqlOperation( mutations.updateUserInfo, { input: newUserInfo }))\n            .then( userInfo => {\n                dispatch( updateUserInfoImage( userInfo.data.updateUserInfo.image ))\n                return null\n            })\n            .catch( err => console.log( err ))\n    }\n}"]},"metadata":{},"sourceType":"module"}