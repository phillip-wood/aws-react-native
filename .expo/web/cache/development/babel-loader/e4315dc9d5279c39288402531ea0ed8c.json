{"ast":null,"code":"import { API } from 'aws-amplify';\nimport { Auth } from 'aws-amplify';\nimport * as queries from \"../src/graphql/queries\";\nexport var SET_SNEAKERS = 'SET_SNEAKERS';\nexport var SET_SEARCH = 'SET_SEARCH';\nexport var SET_USER = 'SET_USER';\nexport var SET_USER_SENAKERS = 'SET_USER_SNEAKERS';\nexport var UPDATE_USER = 'UPDATE_USER';\nexport function setSneakers(sneakers) {\n  return {\n    type: SET_SNEAKERS,\n    sneakers: sneakers\n  };\n}\nexport function setSearch(search) {\n  return {\n    type: SET_SEARCH,\n    search: search\n  };\n}\nexport function setUser(user) {\n  return {\n    type: SET_USER,\n    user: user\n  };\n}\nexport function setUserSneakers(userSneakers) {\n  return {\n    type: SET_USER_SENAKERS,\n    userSneakers: userSneakers\n  };\n}\nexport function updateUser(update) {\n  return {\n    type: UPDATE_USER,\n    update: update\n  };\n}\nexport function fetchAuthUser() {\n  return function (dispatch) {\n    return Auth.currentAuthenticatedUser({\n      bypassCache: false\n    }).then(function (user) {\n      dispatch(setUser({\n        id: user.attributes.sub,\n        email: user.attributes.email,\n        username: user.attributes.preferred_username,\n        picture: user.attributes.picture\n      }));\n      return user.attributes.sub;\n    });\n  };\n}\nexport function fetchSneakers() {\n  return function (dispatch) {\n    return API.graphql({\n      query: queries.listSneakers\n    }).then(function (sneakers) {\n      dispatch(setSneakers(sneakers.data.listSneakers.items));\n      return null;\n    });\n  };\n}\nexport function fetchUserSneakers(userId) {\n  return function (dispatch) {\n    return API.graphql({\n      query: queries.listUserSneakers,\n      variables: {\n        filter: {\n          user_id: userId\n        }\n      }\n    }).then(function (userSneakers) {\n      dispatch(setUserSneakers(userSneakers.data.listUserSneakers.items));\n      return null;\n    });\n  };\n}","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/actions/index.js"],"names":["API","Auth","queries","SET_SNEAKERS","SET_SEARCH","SET_USER","SET_USER_SENAKERS","UPDATE_USER","setSneakers","sneakers","type","setSearch","search","setUser","user","setUserSneakers","userSneakers","updateUser","update","fetchAuthUser","dispatch","currentAuthenticatedUser","bypassCache","then","id","attributes","sub","email","username","preferred_username","picture","fetchSneakers","graphql","query","listSneakers","data","items","fetchUserSneakers","userId","listUserSneakers","variables","filter","user_id"],"mappings":"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","sourcesContent":["import { API } from 'aws-amplify'\nimport { Auth } from 'aws-amplify'\n\nimport * as queries from '../src/graphql/queries'\n\nexport const SET_SNEAKERS = 'SET_SNEAKERS'\nexport const SET_SEARCH = 'SET_SEARCH'\nexport const SET_USER = 'SET_USER'\nexport const SET_USER_SENAKERS = 'SET_USER_SNEAKERS'\nexport const UPDATE_USER = 'UPDATE_USER'\n\nexport function setSneakers (sneakers) {\n  return {\n    type: SET_SNEAKERS,\n    sneakers\n  }\n}\n\nexport function setSearch (search) {\n  return {\n    type: SET_SEARCH,\n    search\n  }\n}\n\nexport function setUser (user) {\n  return {\n    type: SET_USER,\n    user\n  }\n}\n\nexport function setUserSneakers (userSneakers) {\n  return {\n    type: SET_USER_SENAKERS,\n    userSneakers\n  }\n}\n\nexport function updateUser (update) {\n  return {\n    type: UPDATE_USER,\n    update\n  }\n}\n\nexport function fetchAuthUser () {\n  return dispatch => {\n    return Auth.currentAuthenticatedUser({ bypassCache: false })\n      .then(user => {\n        dispatch( setUser({\n          id:user.attributes.sub, \n          email: user.attributes.email, \n          username: user.attributes.preferred_username, \n          picture: user.attributes.picture\n        }))\n          return user.attributes.sub\n    })\n  }\n}\n\nexport function fetchSneakers () {\n  return dispatch => {\n    return API.graphql({ query: queries.listSneakers })\n      .then(sneakers => {\n        dispatch( setSneakers( sneakers.data.listSneakers.items ))\n          return null\n      })\n  }\n}\n\nexport function fetchUserSneakers (userId) {\n  return dispatch => {\n    return API.graphql({ query: queries.listUserSneakers, variables: { filter: { user_id: userId }}})\n      .then(userSneakers => { dispatch( setUserSneakers(userSneakers.data.listUserSneakers.items ))\n          return null\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}