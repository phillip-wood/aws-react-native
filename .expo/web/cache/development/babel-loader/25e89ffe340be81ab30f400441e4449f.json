{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Storage } from 'aws-amplify';\nimport { updateUser } from \"../actions/index\";\nexport function s3ListUserSneakerPics() {\n  return _regeneratorRuntime.async(function s3ListUserSneakerPics$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          try {\n            Storage.list('profile-pics/', {\n              level: 'protected'\n            }).then(function (result) {\n              return console.log(result);\n            });\n          } catch (error) {\n            console.log('❌ Error Getting Images', error);\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function s3UploadProfilePic(uri, dispatch) {\n  var response, blob;\n  return _regeneratorRuntime.async(function s3UploadProfilePic$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          _context2.prev = 1;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(fetch(uri));\n\n        case 4:\n          response = _context2.sent;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(response.blob());\n\n        case 7:\n          blob = _context2.sent;\n          Storage.put(\"profile-pics/profile-picture.jpeg\", blob, {\n            contentType: 'image/jpeg'\n          }).then(function (response) {\n            return s3GetProfilePic(response.key, dispatch);\n          });\n          _context2.next = 14;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('❌ Error Uploading Profile Picture', _context2.t0);\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 11]], Promise);\n}\nexport function s3GetProfilePic(key, dispatch) {\n  return _regeneratorRuntime.async(function s3GetProfilePic$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n\n          try {\n            Storage.get(key).then(function (response) {\n              return dispatch(updateUser(response));\n            });\n          } catch (error) {\n            console.log('❌ Error Getting Profile Picture', error);\n          }\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/apis/storage.js"],"names":["Storage","updateUser","s3ListUserSneakerPics","list","level","then","result","console","log","error","s3UploadProfilePic","uri","dispatch","configure","fetch","response","blob","put","contentType","s3GetProfilePic","key","get"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT;AAEA,OAAO,SAAeC,qBAAf;AAAA;AAAA;AAAA;AAAA;AACH,cAAI;AACAF,YAAAA,OAAO,CAACG,IAAR,CAAa,eAAb,EAA8B;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAA9B,EACKC,IADL,CACU,UAAAC,MAAM;AAAA,qBAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAJ;AAAA,aADhB;AAEC,WAHL,CAIA,OAAOG,KAAP,EAAc;AACNF,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,KAAtC;AACH;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAeC,kBAAf,CAAkCC,GAAlC,EAAuCC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACHZ,UAAAA,OAAO,CAACa,SAAR,CAAkB;AAAET,YAAAA,KAAK,EAAE;AAAT,WAAlB;AADG;AAAA;AAAA,2CAGwBU,KAAK,CAACH,GAAD,CAH7B;;AAAA;AAGOI,UAAAA,QAHP;AAAA;AAAA,2CAIoBA,QAAQ,CAACC,IAAT,EAJpB;;AAAA;AAIOA,UAAAA,IAJP;AAKChB,UAAAA,OAAO,CAACiB,GAAR,sCAAiDD,IAAjD,EAAuD;AACnDE,YAAAA,WAAW,EAAE;AADsC,WAAvD,EAEKb,IAFL,CAEU,UAAAU,QAAQ;AAAA,mBAAII,eAAe,CAACJ,QAAQ,CAACK,GAAV,EAAeR,QAAf,CAAnB;AAAA,WAFlB;AALD;AAAA;;AAAA;AAAA;AAAA;AAUCL,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;;AAVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAeW,eAAf,CAA+BC,GAA/B,EAAoCR,QAApC;AAAA;AAAA;AAAA;AAAA;AACHZ,UAAAA,OAAO,CAACa,SAAR,CAAkB;AAAET,YAAAA,KAAK,EAAE;AAAT,WAAlB;;AACA,cAAI;AACAJ,YAAAA,OAAO,CAACqB,GAAR,CAAYD,GAAZ,EACKf,IADL,CACU,UAAAU,QAAQ;AAAA,qBAAIH,QAAQ,CAACX,UAAU,CAACc,QAAD,CAAX,CAAZ;AAAA,aADlB;AAEC,WAHL,CAIA,OAAON,KAAP,EAAc;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CC,KAA/C;AACC;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Storage } from 'aws-amplify'\nimport { updateUser } from '../actions/index' \n\nexport async function s3ListUserSneakerPics() {\n    try {\n        Storage.list('profile-pics/', { level: 'protected' })\n            .then(result => console.log(result))\n        } \n    catch (error) {\n            console.log('❌ Error Getting Images', error)\n        }\n}\n\nexport async function s3UploadProfilePic(uri, dispatch) {\n    Storage.configure({ level: 'protected' })\n    try {\n        const response = await fetch(uri)\n        const blob = await response.blob()\n        Storage.put(`profile-pics/profile-picture.jpeg`, blob, {\n            contentType: 'image/jpeg', })\n            .then(response => s3GetProfilePic(response.key, dispatch))\n        } \n    catch (error) {\n        console.log('❌ Error Uploading Profile Picture', error)\n        }\n}\n\nexport async function s3GetProfilePic(key, dispatch) {\n    Storage.configure({ level: 'protected' })\n    try {\n        Storage.get(key)\n            .then(response => dispatch(updateUser(response)))\n        } \n    catch (error) {\n        console.log('❌ Error Getting Profile Picture', error)\n        }\n}\n\n\n\n\n// Storage.configure({ level: 'protected' })\n\n// Storage.list('profile-pics/', { level: 'protected' })\n// .then(result => console.log(result))\n// .catch(err => console.log(err))\n\n// const [picture, setPicture] = useState(user.picture)\n\n// const uploadToStorage = async pathToImageFile => {\n//   try {\n//     const response = await fetch(pathToImageFile)\n//     console.log(response)\n//     const blob = await response.blob()\n//     console.log(blob)\n//     Storage.put(`profile-pics/til.jpeg`, blob, {\n//       contentType: 'image/jpeg',\n//     })\n//   } catch (err) {\n//     console.log(err)\n//   }\n// }\n\n// const getfromStorage = async () => {\n//   try {\n//     const response = await Storage.get('profile-pics/til.jpeg')\n//     setPicture(response)\n//     }\n//   catch (err) {\n//     console.error('error accessing the user image',err)\n//   }\n// }\n\n// getfromStorage()\n// console.log(picture)\n\n// const handleAdd = (uri) => {\n// uploadToStorage(uri)\n\n// }\n\n\n// const getfromStorage = async () => {\n//     try {\n//       const response = await Storage.get('profile-pics/profile-picture.jpeg')\n//       .then(updateAuth(response)\n//     }\n//     catch (err) {\n//       console.error('error accessing the user image',err)\n//     }\n//   }\n"]},"metadata":{},"sourceType":"module"}