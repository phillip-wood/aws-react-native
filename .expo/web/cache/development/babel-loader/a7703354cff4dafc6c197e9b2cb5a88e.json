{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar normalizeColor = require(\"../StyleSheet/normalizeColor\");\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar linear = function linear(t) {\n  return t;\n};\n\nvar Interpolation = function () {\n  function Interpolation() {\n    _classCallCheck(this, Interpolation);\n  }\n\n  _createClass(Interpolation, null, [{\n    key: 'create',\n    value: function create(config) {\n      if (config.outputRange && typeof config.outputRange[0] === 'string') {\n        return createInterpolationFromStringOutputRange(config);\n      }\n\n      var outputRange = config.outputRange;\n      checkInfiniteRange('outputRange', outputRange);\n      var inputRange = config.inputRange;\n      checkInfiniteRange('inputRange', inputRange);\n      checkValidInputRange(inputRange);\n      invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n      var easing = config.easing || linear;\n      var extrapolateLeft = 'extend';\n\n      if (config.extrapolateLeft !== undefined) {\n        extrapolateLeft = config.extrapolateLeft;\n      } else if (config.extrapolate !== undefined) {\n        extrapolateLeft = config.extrapolate;\n      }\n\n      var extrapolateRight = 'extend';\n\n      if (config.extrapolateRight !== undefined) {\n        extrapolateRight = config.extrapolateRight;\n      } else if (config.extrapolate !== undefined) {\n        extrapolateRight = config.extrapolate;\n      }\n\n      return function (input) {\n        invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n        var range = findRange(input, inputRange);\n        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n      };\n    }\n  }]);\n\n  return Interpolation;\n}();\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {}\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {}\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  }\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  result = easing(result);\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var int32Color = normalizeColor(input);\n\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0;\n  var r = (int32Color & 0xff000000) >>> 24;\n  var g = (int32Color & 0x00ff0000) >>> 16;\n  var b = (int32Color & 0x0000ff00) >>> 8;\n  var a = (int32Color & 0x000000ff) / 255;\n  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';\n}\n\nvar stringShapeRegex = /[0-9\\.-]+/g;\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return Interpolation.create(_extends({}, config, {\n      outputRange: outputRanges[i]\n    }));\n  });\n  return function (input) {\n    var i = 0;\n    return outputRange[0].replace(stringShapeRegex, function () {\n      return String(interpolations[i++](input));\n    });\n  };\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  for (var i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nmodule.exports = Interpolation;","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/node_modules/react-native-web/dist/apis/Animated/Interpolation.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","normalizeColor","require","invariant","linear","t","Interpolation","value","create","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","int32Color","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","number","push","interpolations","replace","String","arr","pattern","name","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Interpolation\n * \n */\n/* eslint no-bitwise: 0 */\n'use strict';\n\n/* @edit start */\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar normalizeColor = require('../StyleSheet/normalizeColor');\nvar invariant = require('fbjs/lib/invariant');\n/* @edit end */\n\nvar linear = function linear(t) {\n  return t;\n};\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\n\nvar Interpolation = (function () {\n  function Interpolation() {\n    _classCallCheck(this, Interpolation);\n  }\n\n  _createClass(Interpolation, null, [{\n    key: 'create',\n    value: function create(config) {\n\n      if (config.outputRange && typeof config.outputRange[0] === 'string') {\n        return createInterpolationFromStringOutputRange(config);\n      }\n\n      var outputRange = config.outputRange;\n      checkInfiniteRange('outputRange', outputRange);\n\n      var inputRange = config.inputRange;\n      checkInfiniteRange('inputRange', inputRange);\n      checkValidInputRange(inputRange);\n\n      invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n\n      var easing = config.easing || linear;\n\n      var extrapolateLeft = 'extend';\n      if (config.extrapolateLeft !== undefined) {\n        extrapolateLeft = config.extrapolateLeft;\n      } else if (config.extrapolate !== undefined) {\n        extrapolateLeft = config.extrapolate;\n      }\n\n      var extrapolateRight = 'extend';\n      if (config.extrapolateRight !== undefined) {\n        extrapolateRight = config.extrapolateRight;\n      } else if (config.extrapolate !== undefined) {\n        extrapolateRight = config.extrapolate;\n      }\n\n      return function (input) {\n        invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n\n        var range = findRange(input, inputRange);\n        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n      };\n    }\n  }]);\n\n  return Interpolation;\n})();\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var int32Color = normalizeColor(input);\n  if (int32Color === null) {\n    return input;\n  }\n\n  int32Color = int32Color || 0; // $FlowIssue\n\n  var r = (int32Color & 0xff000000) >>> 24;\n  var g = (int32Color & 0x00ff0000) >>> 16;\n  var b = (int32Color & 0x0000ff00) >>> 8;\n  var a = (int32Color & 0x000000ff) / 255;\n\n  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';\n}\n\nvar stringShapeRegex = /[0-9\\.-]+/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return Interpolation.create(_extends({}, config, {\n      outputRange: outputRanges[i]\n    }));\n  });\n\n  return function (input) {\n    var i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, function () {\n      return String(interpolations[i++](input));\n    });\n  };\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  for (var i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1],\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    'inputRange must be monotonically increasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nmodule.exports = Interpolation;"]},"metadata":{},"sourceType":"script"}