{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/phil/Workspace/aws-react-native/app/componets/AppPicker.js\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport AppText from \"./AppText\";\nimport Screen from \"./Screen\";\nimport defaultStyles from \"../config/styles\";\nimport AppButton from \"../components/AppButtckerItem\";\n\nfunction AppPicker(_ref) {\n  var _this = this;\n\n  var icon = _ref.icon,\n      items = _ref.items,\n      onSelectItem = _ref.onSelectItem,\n      placeholder = _ref.placeholder,\n      selectedItem = _ref.selectedItem;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return setModalVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, icon && React.createElement(MaterialCommunityIcons, {\n    name: icon,\n    size: 20,\n    color: defaultStyles.colors.black,\n    style: styles.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }), selectedItem ? React.createElement(AppText, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, selectedItem.label) : React.createElement(AppText, {\n    style: styles.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, placeholder), React.createElement(MaterialCommunityIcons, {\n    name: \"chevron-down\",\n    size: 20,\n    color: defaultStyles.colors.black,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }))), React.createElement(Modal, {\n    visible: modalVisible,\n    animationType: \"slide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, React.createElement(AppButton, {\n    title: \"Close\",\n    onPress: function onPress() {\n      return setModalVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }), React.createElement(FlatList, {\n    data: items,\n    keyExtractor: function keyExtractor(item) {\n      return item.value.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(PickerItem, {\n        label: item.label,\n        onPress: function onPress() {\n          setModalVisible(false);\n          onSelectItem(item);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: defaultStyles.colors.grey,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    width: \"100%\",\n    padding: 15,\n    marginVertical: 10\n  },\n  icon: {\n    marginRight: 10\n  },\n  placeholder: {\n    color: defaultStyles.colors.primary,\n    flex: 1\n  },\n  text: {\n    flex: 1\n  }\n});\nexport default AppPicker;","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/app/componets/AppPicker.js"],"names":["React","useState","MaterialCommunityIcons","AppText","Screen","defaultStyles","AppButton","AppPicker","icon","items","onSelectItem","placeholder","selectedItem","modalVisible","setModalVisible","styles","container","colors","black","text","label","item","value","toString","StyleSheet","create","backgroundColor","grey","borderRadius","flexDirection","width","padding","marginVertical","marginRight","color","primary","flex"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport {\n  View,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  Modal,\n  FlatList,\n} from \"react-native\"\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\"\n\nimport AppText from \"./AppText\"\nimport Screen from \"./Screen\"\nimport defaultStyles from \"../config/styles\"\nimport AppButton from \"../components/AppButtckerItem\"\n\nfunction AppPicker({ icon, items, onSelectItem, placeholder, selectedItem }) {\n    // set state of modal to false using hook\n    const [modalVisible, setModalVisible] = useState(false)\n\n  return (\n    <>\n      <TouchableWithoutFeedback onPress={() => setModalVisible(true)}>\n        <View style={styles.container}>\n          {icon && (\n            <MaterialCommunityIcons\n              name={icon}\n              size={20}\n              color={defaultStyles.colors.black}\n              style={styles.icon}\n            />\n          )}\n          {selectedItem ? (\n            <AppText style={styles.text}>{selectedItem.label}</AppText>\n          ) : (\n            <AppText style={styles.placeholder}>{placeholder}</AppText>\n          )}\n          <MaterialCommunityIcons\n            name=\"chevron-down\"\n            size={20}\n            color={defaultStyles.colors.black}\n          />\n        </View>\n      </TouchableWithoutFeedback>\n      {/* Invisible until Picker is Touched */}\n      <Modal visible={modalVisible} animationType=\"slide\">\n          {/* Screen wrap so modal is in safe area */}\n        <Screen>\n            {/* Button to close modal */}\n          <AppButton title=\"Close\" onPress={() => setModalVisible(false)} />\n          <FlatList\n            data={items}\n            keyExtractor={(item) => item.value.toString()}\n            renderItem={({ item }) => (\n              <PickerItem\n                label={item.label}\n                onPress={() => {\n                  setModalVisible(false)\n                  onSelectItem(item)\n                }}\n              />\n            )}\n          />\n        </Screen>\n      </Modal>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: defaultStyles.colors.grey,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    width: \"100%\",\n    padding: 15,\n    marginVertical: 10,\n  },\n  icon: {\n    marginRight: 10,\n  },\n  placeholder: {\n    color: defaultStyles.colors.primary,\n    flex: 1,\n  },\n  text: {\n    flex: 1,\n  },\n\n})\n\nexport default AppPicker"]},"metadata":{},"sourceType":"module"}