{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Storage } from 'aws-amplify';\nimport uuid from 'react-native-uuid';\nexport function s3ListUserSneakerPics() {\n  return _regeneratorRuntime.async(function s3ListUserSneakerPics$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          return _context.abrupt(\"return\", Storage.list('profile-pics/').then(function (result) {\n            return console.log(result);\n          }).catch(function (error) {\n            return console.log('❌ Error Listing Images', error);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function s3UploadProfilePic(uri, dispatch) {\n  var randomName, response, blob;\n  return _regeneratorRuntime.async(function s3UploadProfilePic$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          Storage.configure({\n            level: 'protected'\n          });\n          randomName = uuid.v1();\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(fetch(uri));\n\n        case 4:\n          response = _context2.sent;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(response.blob());\n\n        case 7:\n          blob = _context2.sent;\n          return _context2.abrupt(\"return\", Storage.put(\"sneaker-pics/\" + randomName + \".jpeg\", blob, {\n            contentType: 'image/jpeg'\n          }).then(function (response) {\n            return s3GetImageLink(response.key);\n          }).then(function (link) {\n            return link;\n          }).catch(function (error) {\n            return console.log('❌ Error Uploading ', error);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function s3GetImageLink(key) {\n  var link;\n  return _regeneratorRuntime.async(function s3GetImageLink$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          Storage.configure({\n            level: 'protected'\n          });\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(Storage.get(key));\n\n        case 4:\n          link = _context3.sent;\n          return _context3.abrupt(\"return\", link);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log('❌ Error Getting Image Link', _context3.t0);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/apis/storage.js"],"names":["Storage","uuid","s3ListUserSneakerPics","configure","level","list","then","result","console","log","catch","error","s3UploadProfilePic","uri","dispatch","randomName","v1","fetch","response","blob","put","contentType","s3GetImageLink","key","link","get"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,OAAO,SAAeC,qBAAf;AAAA;AAAA;AAAA;AAAA;AACHF,UAAAA,OAAO,CAACG,SAAR,CAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAlB;AADG,2CAGIJ,OAAO,CACTK,IADE,CACG,eADH,EAEFC,IAFE,CAEI,UAAAC,MAAM;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAJ;AAAA,WAFV,EAGFG,KAHE,CAGK,UAAAC,KAAK;AAAA,mBAAIH,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCE,KAAtC,CAAJ;AAAA,WAHV,CAHJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAeC,kBAAf,CAAmCC,GAAnC,EAAwCC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACHd,UAAAA,OAAO,CAACG,SAAR,CAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAlB;AACMW,UAAAA,UAFH,GAEgBd,IAAI,CAACe,EAAL,EAFhB;AAAA;AAAA,2CAGoBC,KAAK,CAAEJ,GAAF,CAHzB;;AAAA;AAGGK,UAAAA,QAHH;AAAA;AAAA,2CAIgBA,QAAQ,CAACC,IAAT,EAJhB;;AAAA;AAIGA,UAAAA,IAJH;AAAA,4CAOQnB,OAAO,CACToB,GADE,mBACkBL,UADlB,YACqCI,IADrC,EAC2C;AAAEE,YAAAA,WAAW,EAAE;AAAf,WAD3C,EAEFf,IAFE,CAEI,UAAAY,QAAQ,EAAI;AAAE,mBAAOI,cAAc,CAAEJ,QAAQ,CAACK,GAAX,CAArB;AAAsC,WAFxD,EAGFjB,IAHE,CAGI,UAAAkB,IAAI,EAAI;AAAE,mBAAOA,IAAP;AAAa,WAH3B,EAIFd,KAJE,CAIK,UAAAC,KAAK;AAAA,mBAAIH,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCE,KAAlC,CAAJ;AAAA,WAJV,CAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP,OAAO,SAAeW,cAAf,CAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECvB,UAAAA,OAAO,CAACG,SAAR,CAAkB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAlB;AAFD;AAAA,2CAGoBJ,OAAO,CAACyB,GAAR,CAAYF,GAAZ,CAHpB;;AAAA;AAGOC,UAAAA,IAHP;AAAA,4CAIQA,IAJR;;AAAA;AAAA;AAAA;AAOChB,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Storage } from 'aws-amplify'\nimport uuid from 'react-native-uuid'\n\nexport async function s3ListUserSneakerPics() {\n    Storage.configure({ level: 'protected' })\n    \n    return Storage\n        .list('profile-pics/')\n        .then( result => console.log(result))\n        .catch( error => console.log('❌ Error Listing Images', error))\n}\n\nexport async function s3UploadProfilePic( uri, dispatch ) {\n    Storage.configure({ level: 'protected' })\n    const randomName = uuid.v1()\n    const response = await fetch( uri )\n    const blob = await response.blob()\n    \n    // return dispatch => {\n        return Storage\n            .put(`sneaker-pics/${randomName}.jpeg`, blob, { contentType: 'image/jpeg', })\n            .then( response => { return s3GetImageLink( response.key )})\n            .then( link => { return link })\n            .catch( error => console.log('❌ Error Uploading ', error) )  \n    // }\n}\n\nexport async function s3GetImageLink(key) {\n    try{\n        Storage.configure({ level: 'protected' })\n        const link = await Storage.get(key)\n        return link\n    }\n    catch (err) {\n        console.log('❌ Error Getting Image Link',err)\n    }   \n} \n"]},"metadata":{},"sourceType":"module"}