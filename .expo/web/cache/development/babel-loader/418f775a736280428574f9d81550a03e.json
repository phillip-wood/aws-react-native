{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (x1, y1, x2, y2, epsilon) {\n  var curveX = function curveX(t) {\n    var v = 1 - t;\n    return 3 * v * v * t * x1 + 3 * v * t * t * x2 + t * t * t;\n  };\n\n  var curveY = function curveY(t) {\n    var v = 1 - t;\n    return 3 * v * v * t * y1 + 3 * v * t * t * y2 + t * t * t;\n  };\n\n  var derivativeCurveX = function derivativeCurveX(t) {\n    var v = 1 - t;\n    return 3 * (2 * (t - 1) * t + v * v) * x1 + 3 * (-t * t * t + 2 * v * t) * x2;\n  };\n\n  return function (t) {\n    var x = t,\n        t0,\n        t1,\n        t2,\n        x2,\n        d2,\n        i;\n\n    for (t2 = x, i = 0; i < 8; i++) {\n      x2 = curveX(t2) - x;\n\n      if (Math.abs(x2) < epsilon) {\n        return curveY(t2);\n      }\n\n      d2 = derivativeCurveX(t2);\n\n      if (Math.abs(d2) < 1e-6) {\n        break;\n      }\n\n      t2 = t2 - x2 / d2;\n    }\n\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n\n    if (t2 < t0) {\n      return curveY(t0);\n    }\n\n    if (t2 > t1) {\n      return curveY(t1);\n    }\n\n    while (t0 < t1) {\n      x2 = curveX(t2);\n\n      if (Math.abs(x2 - x) < epsilon) {\n        return curveY(t2);\n      }\n\n      if (x > x2) {\n        t0 = t2;\n      } else {\n        t1 = t2;\n      }\n\n      t2 = (t1 - t0) * 0.5 + t0;\n    }\n\n    return curveY(t2);\n  };\n};","map":{"version":3,"sources":["/home/phil/Workspace/aws-react-native/node_modules/react-native-web/dist/apis/Easing/bezier.js"],"names":["module","exports","x1","y1","x2","y2","epsilon","curveX","t","v","curveY","derivativeCurveX","x","t0","t1","t2","d2","i","Math","abs"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/* eslint-disable */\n/**\n * https://github.com/arian/cubic-bezier\n *\n * MIT License\n *\n * Copyright (c) 2013 Arian Stolwijk\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @providesModule bezier\n * @nolint\n */\n\nmodule.exports = function (x1, y1, x2, y2, epsilon) {\n\n  var curveX = function curveX(t) {\n    var v = 1 - t;\n    return 3 * v * v * t * x1 + 3 * v * t * t * x2 + t * t * t;\n  };\n\n  var curveY = function curveY(t) {\n    var v = 1 - t;\n    return 3 * v * v * t * y1 + 3 * v * t * t * y2 + t * t * t;\n  };\n\n  var derivativeCurveX = function derivativeCurveX(t) {\n    var v = 1 - t;\n    return 3 * (2 * (t - 1) * t + v * v) * x1 + 3 * (-t * t * t + 2 * v * t) * x2;\n  };\n\n  return function (t) {\n\n    var x = t,\n        t0,\n        t1,\n        t2,\n        x2,\n        d2,\n        i;\n\n    // First try a few iterations of Newton's method -- normally very fast.\n    for (t2 = x, i = 0; i < 8; i++) {\n      x2 = curveX(t2) - x;\n      if (Math.abs(x2) < epsilon) {\n        return curveY(t2);\n      }\n      d2 = derivativeCurveX(t2);\n      if (Math.abs(d2) < 1e-6) {\n        break;\n      }\n      t2 = t2 - x2 / d2;\n    }\n\n    t0 = 0;\n    t1 = 1;\n    t2 = x;\n\n    if (t2 < t0) {\n      return curveY(t0);\n    }\n    if (t2 > t1) {\n      return curveY(t1);\n    }\n\n    // Fallback to the bisection method for reliability.\n    while (t0 < t1) {\n      x2 = curveX(t2);\n      if (Math.abs(x2 - x) < epsilon) {\n        return curveY(t2);\n      }\n      if (x > x2) {\n        t0 = t2;\n      } else {\n        t1 = t2;\n      }\n      t2 = (t1 - t0) * 0.5 + t0;\n    }\n\n    // Failure\n    return curveY(t2);\n  };\n};"]},"metadata":{},"sourceType":"script"}